import{_ as e,a as t,b as c}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.052e419c.js";import{_ as r,C as i,o as E,c as u,H as s,w as a,Q as y}from"./chunks/framework.27021b64.js";const D=JSON.parse('{"title":"tsconfig.json 用法","description":"","frontmatter":{},"headers":[],"relativePath":"note/tsconfig.md","filePath":"note/tsconfig.md","lastUpdated":1692608200000}'),d={name:"note/tsconfig.md"},b=y(`<h1 id="tsconfig-json-用法" tabindex="-1">tsconfig.json 用法 <a class="header-anchor" href="#tsconfig-json-用法" aria-label="Permalink to &quot;tsconfig.json 用法&quot;">​</a></h1><p>tsconfig.json 是 TypeScript 项目的配置文件，用于指导 TypeScript 编译器如何编译 .ts 文件。通过这个文件，你可以控制编译器的各种设置，包括编译的 ECMAScript 目标版本、模块系统、类型检查严格程度等。</p><p>在项目根目录下运行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># npx tsc --init</span></span>
<span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># npx tsc --init</span></span>
<span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="target" tabindex="-1">target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;target&quot;">​</a></h3><ul><li>默认值：es3</li></ul><p>target 选项允许你设置 TypeScript 编译器将 TypeScript 代码编译为哪个 ECMAScript 版本的 JavaScript 代码。这个选项的设置会影响编译后的代码风格和可用特性。</p><p><code>target</code> 选项可以设置为以下值之一：</p><ul><li><p><code>&quot;ES3&quot;</code>: 编译为 ECMAScript 3 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES5&quot;</code>: 编译为 ECMAScript 5 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES6&quot;</code> 或 <code>&quot;ES2015&quot;</code>: 编译为 ECMAScript 2015 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES2016&quot;</code>: 编译为 ECMAScript 2016 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES2017&quot;</code>: 编译为 ECMAScript 2017 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES2018&quot;</code>: 编译为 ECMAScript 2018 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES2019&quot;</code>: 编译为 ECMAScript 2019 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ES2020&quot;</code>: 编译为 ECMAScript 2020 标准的 JavaScript 代码。</p></li><li><p><code>&quot;ESNext&quot;</code>: 编译为最新 ECMAScript 草案标准的 JavaScript 代码。</p></li><li><p>例子：</p></li></ul><h4 id="_1-es3-示例" tabindex="-1">1. ES3 示例 <a class="header-anchor" href="#_1-es3-示例" aria-label="Permalink to &quot;1. ES3 示例&quot;">​</a></h4><p>如果目标是更旧的 ECMAScript 版本，例如 ES3，一些现代 JavaScript 特性将被转换或移除。例如，<code>const</code> 将被转换为 <code>var</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ES3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ES3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译后的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-es5-示例" tabindex="-1">2. ES5 示例 <a class="header-anchor" href="#_2-es5-示例" aria-label="Permalink to &quot;2. ES5 示例&quot;">​</a></h4><p>假设我们有以下 TypeScript 代码：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果在 <code>tsconfig.json</code> 中设置 <code>&quot;target&quot;: &quot;ES5&quot;</code>，编译后的 JavaScript 代码将转换箭头函数为普通函数：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ES5&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ES5&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译后的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-es6-es2015-示例" tabindex="-1">3. ES6（ES2015） 示例 <a class="header-anchor" href="#_3-es6-es2015-示例" aria-label="Permalink to &quot;3. ES6（ES2015） 示例&quot;">​</a></h4><p>同样的 TypeScript 代码，如果设置 <code>&quot;target&quot;: &quot;ES6&quot;</code>，则编译后的代码将保留箭头函数：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ES6&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ES6&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译后的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h3><p><code>module</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于指定编译后的代码应该使用哪种模块化标准。JavaScript 有多种模块化标准，不同的环境可能需要不同的模块化标准。</p><h4 id="_1-module-选项的作用" tabindex="-1">1. module 选项的作用 <a class="header-anchor" href="#_1-module-选项的作用" aria-label="Permalink to &quot;1. module 选项的作用&quot;">​</a></h4><p><code>module</code> 选项允许你选择以下模块化标准之一：</p><ul><li><code>&quot;None&quot;</code>: 不生成模块代码。</li><li><code>&quot;CommonJS&quot;</code>: 适用于 Node.js 和其他 CommonJS 兼容的环境。</li><li><code>&quot;AMD&quot;</code>: 适用于异步模块定义，如 RequireJS。</li><li><code>&quot;System&quot;</code>: 适用于 SystemJS 加载器。</li><li><code>&quot;UMD&quot;</code>: 适用于通用模块定义，可以同时用于 CommonJS 和 AMD。</li><li><code>&quot;ES6&quot;</code> 或 <code>&quot;ES2015&quot;</code>: 使用 ECMAScript 2015 的模块化标准。</li><li><code>&quot;ES2020&quot;</code>: 使用 ECMAScript 2020 的模块化标准。</li><li><code>&quot;ESNext&quot;</code>: 使用最新的 ECMAScript 模块化标准。</li></ul><h4 id="_2-示例" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-commonjs-示例" tabindex="-1">2.1 CommonJS 示例 <a class="header-anchor" href="#_2-1-commonjs-示例" aria-label="Permalink to &quot;2.1 CommonJS 示例&quot;">​</a></h5><p>假设我们有以下 TypeScript 代码：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { add } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { add } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果在 <code>tsconfig.json</code> 中设置 <code>&quot;module&quot;: &quot;CommonJS&quot;</code>，编译后的代码将使用 CommonJS 模块化标准：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;CommonJS&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;CommonJS&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译后的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> math_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./math&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(math_1.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> math_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./math&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(math_1.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_2-2-es6-示例" tabindex="-1">2.2 ES6 示例 <a class="header-anchor" href="#_2-2-es6-示例" aria-label="Permalink to &quot;2.2 ES6 示例&quot;">​</a></h5><p>同样的 TypeScript 代码，如果设置 <code>&quot;module&quot;: &quot;ES6&quot;</code>，则编译后的代码将使用 ECMAScript 2015 模块化标准：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ES6&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ES6&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译后的代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { add } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { add } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="lib" tabindex="-1">lib <a class="header-anchor" href="#lib" aria-label="Permalink to &quot;lib&quot;">​</a></h3><p><code>lib</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于指定编译时可用的库文件。这些库文件包含了 ECMAScript 的各个版本以及如 DOM、WebWorker 等宿主环境的类型定义。</p><h4 id="_1-lib-选项的作用" tabindex="-1">1. lib 选项的作用 <a class="header-anchor" href="#_1-lib-选项的作用" aria-label="Permalink to &quot;1. lib 选项的作用&quot;">​</a></h4><p>通过设置 <code>lib</code> 选项，你可以控制 TypeScript 编译器应该包括哪些内置类型定义文件。这样可以确保你的代码只使用目标运行环境支持的特性。</p><p>例如，如果你的代码需要在不支持 ECMAScript 2015 Promises 的旧浏览器中运行，你可能不希望包括与 Promises 相关的类型定义。</p><h4 id="_2-可用值" tabindex="-1">2. 可用值 <a class="header-anchor" href="#_2-可用值" aria-label="Permalink to &quot;2. 可用值&quot;">​</a></h4><p><code>lib</code> 选项可以设置为以下值之一或它们的组合：</p><ul><li><p><code>&quot;ES5&quot;</code>、<code>&quot;ES6&quot;</code>、<code>&quot;ES2015&quot;</code>、<code>&quot;ES2016&quot;</code>、<code>&quot;ES2017&quot;</code>、<code>&quot;ES2018&quot;</code>、<code>&quot;ES2019&quot;</code>、<code>&quot;ES2020&quot;</code>、<code>&quot;ESNext&quot;</code>: 包括与特定 ECMAScript 版本相关的类型定义。</p></li><li><p><code>&quot;DOM&quot;</code>: 包括与浏览器 DOM 相关的类型定义。</p></li><li><p><code>&quot;WebWorker&quot;</code>: 包括与 Web Workers 相关的类型定义。</p></li><li><p><code>&quot;ScriptHost&quot;</code>: 包括与 Windows 脚本宿主相关的类型定义。</p></li></ul><h4 id="_3-示例" tabindex="-1">3. 示例 <a class="header-anchor" href="#_3-示例" aria-label="Permalink to &quot;3. 示例&quot;">​</a></h4><h5 id="_3-1-只包括-es5-和-dom-类型定义" tabindex="-1">3.1 只包括 ES5 和 DOM 类型定义 <a class="header-anchor" href="#_3-1-只包括-es5-和-dom-类型定义" aria-label="Permalink to &quot;3.1 只包括 ES5 和 DOM 类型定义&quot;">​</a></h5><p>如果你的代码需要在只支持 ECMAScript 5 和基本 DOM API 的浏览器中运行，你可以设置 <code>lib</code> 选项如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lib&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;ES5&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;DOM&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lib&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ES5&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;DOM&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，编译器将只包括与 ECMAScript 5 和 DOM 相关的类型定义，不会包括与更高版本 ECMAScript 或其他宿主环境相关的类型定义。</p><h5 id="_3-2-包括-es2017-和-webworker-类型定义" tabindex="-1">3.2 包括 ES2017 和 WebWorker 类型定义 <a class="header-anchor" href="#_3-2-包括-es2017-和-webworker-类型定义" aria-label="Permalink to &quot;3.2 包括 ES2017 和 WebWorker 类型定义&quot;">​</a></h5><p>如果你的代码需要使用 ECMAScript 2017 的特性，并且需要在 Web Workers 中运行，你可以设置 <code>lib</code> 选项如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lib&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;ES2017&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;WebWorker&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lib&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ES2017&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;WebWorker&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，编译器将包括与 ECMAScript 2017 和 Web Workers 相关的类型定义。</p><p><code>allowJs</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于控制是否允许编译 JavaScript 文件。这个选项可以让你在 TypeScript 项目中混合使用 TypeScript 和 JavaScript 代码。</p><h3 id="allowjs" tabindex="-1">allowJs <a class="header-anchor" href="#allowjs" aria-label="Permalink to &quot;allowJs&quot;">​</a></h3><h4 id="_1-allowjs-选项的作用" tabindex="-1">1. allowJs 选项的作用 <a class="header-anchor" href="#_1-allowjs-选项的作用" aria-label="Permalink to &quot;1. allowJs 选项的作用&quot;">​</a></h4><p>当你设置 <code>allowJs</code> 选项为 <code>true</code> 时，TypeScript 编译器将允许编译 JavaScript 文件（<code>.js</code> 和 <code>.jsx</code>）。这对于逐步迁移现有的 JavaScript 项目到 TypeScript 或在 TypeScript 项目中使用第三方 JavaScript 库非常有用。</p><h4 id="_2-示例-1" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-1" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-允许编译-javascript-文件" tabindex="-1">2.1 允许编译 JavaScript 文件 <a class="header-anchor" href="#_2-1-允许编译-javascript-文件" aria-label="Permalink to &quot;2.1 允许编译 JavaScript 文件&quot;">​</a></h5><p>假设你有一个 TypeScript 项目，其中包括一些 JavaScript 文件，你希望这些文件也能被 TypeScript 编译器处理。你可以在 <code>tsconfig.json</code> 文件中设置 <code>allowJs</code> 选项为 <code>true</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;src/**/*.js&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;src/**/*.js&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样，TypeScript 编译器将编译 <code>src</code> 目录下的所有 <code>.ts</code> 和 <code>.js</code> 文件，并将编译后的代码输出到 <code>dist</code> 目录。</p><h5 id="_2-2-与其他选项结合使用" tabindex="-1">2.2 与其他选项结合使用 <a class="header-anchor" href="#_2-2-与其他选项结合使用" aria-label="Permalink to &quot;2.2 与其他选项结合使用&quot;">​</a></h5><p>你还可以与其他选项结合使用，例如 <code>checkJs</code>。当 <code>checkJs</code> 设置为 <code>true</code> 时，编译器将对 JavaScript 文件执行类型检查：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;checkJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;src/**/*.js&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;checkJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;src/**/*.js&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样，编译器不仅会编译 JavaScript 文件，还会对它们执行类型检查，就像对 TypeScript 文件所做的那样。</p><h3 id="skiplibcheck" tabindex="-1">skipLibCheck <a class="header-anchor" href="#skiplibcheck" aria-label="Permalink to &quot;skipLibCheck&quot;">​</a></h3><p><code>skipLibCheck</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项。它用于控制编译器是否跳过对声明文件（<code>.d.ts</code> 文件）的类型检查。</p><h4 id="_1-skiplibcheck-选项的作用" tabindex="-1">1. skipLibCheck 选项的作用 <a class="header-anchor" href="#_1-skiplibcheck-选项的作用" aria-label="Permalink to &quot;1. skipLibCheck 选项的作用&quot;">​</a></h4><p>当你设置 <code>skipLibCheck</code> 选项为 <code>true</code> 时，TypeScript 编译器将跳过对所有声明文件的类型检查。这可以减少编译时间，特别是在大型项目中，或者当某些声明文件中存在不可避免的类型错误时。</p><p>然而，禁用库检查可能会隐藏项目中的实际类型错误，因此需要谨慎使用。</p><h4 id="_2-示例-2" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-2" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-skiplibcheck" tabindex="-1">2.1 启用 skipLibCheck <a class="header-anchor" href="#_2-1-启用-skiplibcheck" aria-label="Permalink to &quot;2.1 启用 skipLibCheck&quot;">​</a></h5><p>假设你有一个项目，其中包括许多第三方库，并且你想要减少编译时间。你可以在 <code>tsconfig.json</code> 文件中设置 <code>skipLibCheck</code> 选项为 <code>true</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;skipLibCheck&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;skipLibCheck&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，编译器将跳过对所有声明文件的类型检查，可能会加快编译速度。</p><h5 id="_2-2-禁用-skiplibcheck" tabindex="-1">2.2 禁用 skipLibCheck <a class="header-anchor" href="#_2-2-禁用-skiplibcheck" aria-label="Permalink to &quot;2.2 禁用 skipLibCheck&quot;">​</a></h5><p>如果你想要确保所有库的类型定义都正确，你可以将 <code>skipLibCheck</code> 设置为 <code>false</code> 或完全省略该选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;skipLibCheck&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;skipLibCheck&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，编译器将对所有声明文件执行类型检查，确保它们与你的代码完全兼容。</p><h3 id="moduleresolution" tabindex="-1">moduleResolution <a class="header-anchor" href="#moduleresolution" aria-label="Permalink to &quot;moduleResolution&quot;">​</a></h3><p><code>moduleResolution</code> 选项允许你根据项目的运行环境和构建工具选择合适的模块解析策略。正确设置此选项可以确保编译器正确解析项目中的所有模块。</p><h4 id="_1-moduleresolution-选项的作用" tabindex="-1">1. moduleResolution 选项的作用 <a class="header-anchor" href="#_1-moduleresolution-选项的作用" aria-label="Permalink to &quot;1. moduleResolution 选项的作用&quot;">​</a></h4><p><code>moduleResolution</code> 选项用于指定模块解析策略，以下是可用的值：</p><ul><li><code>&#39;node16&#39;</code> 或 <code>&#39;nodenext&#39;</code>: 用于现代版本的 Node.js（v12 及更高版本），支持 ECMAScript imports 和 CommonJS require。</li><li><code>&#39;node10&#39;</code>: 用于 Node.js v10 之前的版本，仅支持 CommonJS require。</li><li><code>&#39;bundler&#39;</code>: 用于与打包工具一起使用，支持 <code>package.json</code> 中的 <code>&quot;imports&quot;</code> 和 <code>&quot;exports&quot;</code>，但不要求相对路径中的文件扩展名。</li><li><code>&#39;classic&#39;</code>: TypeScript 1.6 之前使用的解析策略，现在不应再使用。</li></ul><h4 id="_2-示例-3" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-3" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-使用-node16-解析策略" tabindex="-1">2.1 使用 node16 解析策略 <a class="header-anchor" href="#_2-1-使用-node16-解析策略" aria-label="Permalink to &quot;2.1 使用 node16 解析策略&quot;">​</a></h5><p>如果你的项目运行在 Node.js v12 或更高版本上，你可以使用以下配置：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;moduleResolution&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node16&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node16&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_2-2-使用-bundler-解析策略" tabindex="-1">2.2 使用 bundler 解析策略 <a class="header-anchor" href="#_2-2-使用-bundler-解析策略" aria-label="Permalink to &quot;2.2 使用 bundler 解析策略&quot;">​</a></h5><p>如果你的项目使用打包工具，你可以使用以下配置：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;moduleResolution&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bundler&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bundler&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="importhelpers" tabindex="-1">importHelpers <a class="header-anchor" href="#importhelpers" aria-label="Permalink to &quot;importHelpers&quot;">​</a></h3><p><code>importHelpers</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项。当设置为 <code>true</code> 时，它允许 TypeScript 编译器从 <a href="https://www.npmjs.com/package/tslib" target="_blank" rel="noreferrer">tslib</a> 包导入辅助函数，而不是将这些辅助函数内联到每个输出文件中。</p><h4 id="_1-importhelpers-选项的作用" tabindex="-1">1. importHelpers 选项的作用 <a class="header-anchor" href="#_1-importhelpers-选项的作用" aria-label="Permalink to &quot;1. importHelpers 选项的作用&quot;">​</a></h4><p>在 TypeScript 代码编译过程中，编译器可能会生成一些辅助函数，例如用于实现继承、展开操作符等特性的代码。默认情况下，这些辅助函数会被内联到每个使用它们的输出文件中。</p><p>当你设置 <code>importHelpers</code> 选项为 <code>true</code> 时，编译器将从 <code>tslib</code> 包导入这些辅助函数，而不是将它们内联到输出文件中。这可以减小输出文件的大小，特别是在大型项目中。</p><h4 id="_2-示例-4" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-4" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-importhelpers" tabindex="-1">2.1 启用 importHelpers <a class="header-anchor" href="#_2-1-启用-importhelpers" aria-label="Permalink to &quot;2.1 启用 importHelpers&quot;">​</a></h5><p>首先，你需要确保项目中安装了 <code>tslib</code> 包。你可以使用以下命令安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tslib</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tslib</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，你可以在 <code>tsconfig.json</code> 文件中设置 <code>importHelpers</code> 选项为 <code>true</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;importHelpers&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;importHelpers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假设你有以下 TypeScript 代码：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当 <code>importHelpers</code> 设置为 <code>true</code> 时，编译后的代码将从 <code>tslib</code> 导入 <code>__extends</code> 辅助函数，而不是将其内联到输出文件中：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> tslib_1 </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tslib&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Animal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@class</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Animal;</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Dog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@class</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">_super</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  tslib_1.</span><span style="color:#B392F0;">__extends</span><span style="color:#E1E4E8;">(Dog, _super);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _super.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, name) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Dog;</span></span>
<span class="line"><span style="color:#E1E4E8;">})(Animal);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> tslib_1 </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tslib&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Animal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@class</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Animal;</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Dog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@class</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">_super</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  tslib_1.</span><span style="color:#6F42C1;">__extends</span><span style="color:#24292E;">(Dog, _super);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _super.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, name) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Dog;</span></span>
<span class="line"><span style="color:#24292E;">})(Animal);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="noemit" tabindex="-1">noEmit <a class="header-anchor" href="#noemit" aria-label="Permalink to &quot;noEmit&quot;">​</a></h3><p><code>noEmit</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项。当设置为 <code>true</code> 时，它会告诉 TypeScript 编译器进行类型检查，但不生成输出文件。</p><h4 id="_1-noemit-选项的作用" tabindex="-1">1. noEmit 选项的作用 <a class="header-anchor" href="#_1-noemit-选项的作用" aria-label="Permalink to &quot;1. noEmit 选项的作用&quot;">​</a></h4><p><code>noEmit</code> 选项通常用于以下场景：</p><ul><li><strong>类型检查</strong>: 当你只想进行类型检查而不想生成 JavaScript 输出文件时，可以设置 <code>noEmit</code> 为 <code>true</code>。</li><li><strong>与 Babel 配合使用</strong>: 如果你使用 Babel 来转换 TypeScript 文件，你可能希望 TypeScript 编译器仅进行类型检查，而让 Babel 负责生成输出文件。在这种情况下，你可以设置 <code>noEmit</code> 为 <code>true</code>。</li></ul><h4 id="_2-示例-5" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-5" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-noemit" tabindex="-1">2.1 启用 noEmit <a class="header-anchor" href="#_2-1-启用-noemit" aria-label="Permalink to &quot;2.1 启用 noEmit&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>noEmit</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noEmit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmit&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在这个配置中，TypeScript 编译器将对 <code>src</code> 目录中的 <code>.ts</code> 文件进行类型检查，但不会生成任何输出文件。</p><h5 id="_2-2-禁用-noemit" tabindex="-1">2.2 禁用 noEmit <a class="header-anchor" href="#_2-2-禁用-noemit" aria-label="Permalink to &quot;2.2 禁用 noEmit&quot;">​</a></h5><p>如果你想让 TypeScript 编译器生成输出文件，你可以将 <code>noEmit</code> 设置为 <code>false</code> 或完全省略该选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noEmit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmit&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在这个配置中，TypeScript 编译器将对 <code>src</code> 目录中的 <code>.ts</code> 文件进行类型检查，并生成相应的 JavaScript 输出文件。</p><h3 id="jsx" tabindex="-1">jsx <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;jsx&quot;">​</a></h3><p><code>jsx</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于控制如何处理 JSX 语法。JSX 是一种 JavaScript 扩展语法，允许你在 JavaScript 文件中编写类似 HTML 的标记。它通常与 React 等库一起使用。</p><h4 id="_1-jsx-选项的作用" tabindex="-1">1. jsx 选项的作用 <a class="header-anchor" href="#_1-jsx-选项的作用" aria-label="Permalink to &quot;1. jsx 选项的作用&quot;">​</a></h4><p><code>jsx</code> 选项有以下可能的值：</p><ul><li><code>&quot;preserve&quot;</code>: 保留 JSX 表达式以供后续的转换步骤处理。输出文件将保留 <code>.jsx</code> 扩展名。</li><li><code>&quot;react&quot;</code>: 转换 JSX 为 <code>React.createElement</code> 调用。这是使用 React 时的常见选择。</li><li><code>&quot;react-native&quot;</code>: 与 <code>&quot;preserve&quot;</code> 相同，但输出文件将保留 <code>.js</code> 扩展名。</li><li><code>&quot;react-jsx&quot;</code>: 转换 JSX 为调用 React 17 或更高版本引入的新 JSX 转换函数。需要 React 17 或更高版本。</li></ul><h4 id="_2-示例-6" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-6" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-使用-react-转换" tabindex="-1">2.1 使用 React 转换 <a class="header-anchor" href="#_2-1-使用-react-转换" aria-label="Permalink to &quot;2.1 使用 React 转换&quot;">​</a></h5><p>如果你的项目使用 React，并且你想将 JSX 转换为 <code>React.createElement</code> 调用，你可以在 <code>tsconfig.json</code> 文件中设置 <code>jsx</code> 选项为 <code>&quot;react&quot;</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;jsx&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;react&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;react&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假设你有以下 TypeScript 文件：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;Hello, World!&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> App;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;Hello, World!&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 <code>&quot;react&quot;</code> 选项编译后，输出文件将包含 <code>React.createElement</code> 调用：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> App;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_2-2-使用-react-17-新-jsx-转换" tabindex="-1">2.2 使用 React 17 新 JSX 转换 <a class="header-anchor" href="#_2-2-使用-react-17-新-jsx-转换" aria-label="Permalink to &quot;2.2 使用 React 17 新 JSX 转换&quot;">​</a></h5><p>如果你的项目使用 React 17 或更高版本，你可以使用新的 JSX 转换功能。在 <code>tsconfig.json</code> 文件中设置 <code>jsx</code> 选项为 <code>&quot;react-jsx&quot;</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;jsx&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;react-jsx&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;react-jsx&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用这个选项，编译后的代码将使用新的 JSX 转换函数，这可以提供更好的性能和更小的包大小。</p><h3 id="esmoduleinterop" tabindex="-1">esModuleInterop <a class="header-anchor" href="#esmoduleinterop" aria-label="Permalink to &quot;esModuleInterop&quot;">​</a></h3><p><code>esModuleInterop</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项，用于控制 TypeScript 如何与 CommonJS 和 ES6 模块进行交互。这个选项可以确保更一致的导入行为，特别是在混合使用 CommonJS 和 ES6 模块的项目中。</p><h4 id="_1-esmoduleinterop-选项的作用" tabindex="-1">1. esModuleInterop 选项的作用 <a class="header-anchor" href="#_1-esmoduleinterop-选项的作用" aria-label="Permalink to &quot;1. esModuleInterop 选项的作用&quot;">​</a></h4><p>当设置为 <code>true</code> 时，<code>esModuleInterop</code> 会启用以下行为：</p><ul><li>允许使用 ES6 风格的导入语法来导入 CommonJS 模块。</li><li>自动生成一个名为 <code>__importDefault</code> 的辅助函数，用于创建与 ES6 默认导入兼容的对象。</li></ul><p>这个选项的目的是简化在同一项目中混合使用 CommonJS 和 ES6 模块的复杂性。</p><h4 id="_2-示例-7" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-7" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-esmoduleinterop" tabindex="-1">2.1 启用 esModuleInterop <a class="header-anchor" href="#_2-1-启用-esmoduleinterop" aria-label="Permalink to &quot;2.1 启用 esModuleInterop&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>esModuleInterop</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;esModuleInterop&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;esModuleInterop&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假设你有一个 CommonJS 模块 <code>myModule.js</code>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当 <code>esModuleInterop</code> 设置为 <code>true</code> 时，你可以使用 ES6 风格的导入语法来导入此模块：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> myModule </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./myModule&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> myModule </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./myModule&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>编译后的代码将包括 <code>__importDefault</code> 辅助函数，以确保导入的对象与 ES6 默认导入兼容：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> __importDefault </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.__importDefault) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">mod</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mod </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mod.__esModule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> mod </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { default: mod };</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myModule_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__importDefault</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./myModule&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myModule_1.default.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> __importDefault </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.__importDefault) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">mod</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mod </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mod.__esModule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> mod </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { default: mod };</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myModule_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__importDefault</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./myModule&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myModule_1.default.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_2-2-禁用-esmoduleinterop" tabindex="-1">2.2 禁用 esModuleInterop <a class="header-anchor" href="#_2-2-禁用-esmoduleinterop" aria-label="Permalink to &quot;2.2 禁用 esModuleInterop&quot;">​</a></h5><p>如果你将 <code>esModuleInterop</code> 设置为 <code>false</code> 或完全省略该选项，你将需要使用 <code>import * as</code> 语法来导入 CommonJS 模块：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> myModule </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./myModule&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> myModule </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./myModule&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>esModuleInterop</code> 选项允许你在 TypeScript 项目中更灵活地混合使用 CommonJS 和 ES6 模块。通过启用此选项，你可以使用更一致的导入语法，并确保导入的对象与 ES6 默认导入兼容。</p><p>这个选项特别适用于那些依赖于 CommonJS 和 ES6 模块的现代项目。如果你的项目完全使用 ES6 模块，你可能不需要启用此选项。</p><h3 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;sourceMap&quot;">​</a></h3><p><code>sourceMap</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项，用于控制是否生成源映射文件（source map）。源映射文件可以帮助开发者在调试编译后的代码时，更容易地映射回原始的 TypeScript 源代码。</p><h4 id="_1-sourcemap-选项的作用" tabindex="-1">1. sourceMap 选项的作用 <a class="header-anchor" href="#_1-sourcemap-选项的作用" aria-label="Permalink to &quot;1. sourceMap 选项的作用&quot;">​</a></h4><p>当设置为 <code>true</code> 时，<code>sourceMap</code> 选项会让 TypeScript 编译器为每个输出文件生成一个对应的 <code>.map</code> 文件。这个 <code>.map</code> 文件包含了编译后的 JavaScript 代码与原始 TypeScript 代码之间的映射信息。</p><p>这个映射信息允许开发者在浏览器或其他调试工具中，直接查看和调试原始的 TypeScript 代码，而不是编译后的 JavaScript 代码。</p><h4 id="_2-示例-8" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-8" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-sourcemap" tabindex="-1">2.1 启用 sourceMap <a class="header-anchor" href="#_2-1-启用-sourcemap" aria-label="Permalink to &quot;2.1 启用 sourceMap&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>sourceMap</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;sourceMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假设你有以下 TypeScript 文件 <code>example.ts</code>：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Hello, \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello, \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当 <code>sourceMap</code> 设置为 <code>true</code> 时，编译后你将得到两个文件：<code>example.js</code> 和 <code>example.js.map</code>。</p><p><code>example.js</code> 文件包含编译后的 JavaScript 代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//# sourceMappingURL=example.js.map</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//# sourceMappingURL=example.js.map</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>example.js.map</code> 文件包含源映射信息，链接编译后的 JavaScript 代码与原始 TypeScript 代码。</p><h5 id="_2-2-在浏览器中调试" tabindex="-1">2.2 在浏览器中调试 <a class="header-anchor" href="#_2-2-在浏览器中调试" aria-label="Permalink to &quot;2.2 在浏览器中调试&quot;">​</a></h5><p>当源映射文件存在时，你可以在浏览器的开发者工具中直接查看和调试原始的 TypeScript 代码。这使得调试过程更直观，更容易定位问题。</p><p><code>sourceMap</code> 选项允许 TypeScript 编译器生成源映射文件，从而提供更好的调试体验。通过启用此选项，开发者可以在浏览器或其他调试工具中直接查看和调试原始的 TypeScript 代码。</p><p>这个选项对于任何需要调试 TypeScript 代码的项目都非常有用，特别是在开发环境中。在生产环境中，你可能会选择禁用此选项，以减小输出文件的大小。</p><h3 id="baseurl" tabindex="-1">baseUrl <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;baseUrl&quot;">​</a></h3><p><code>baseUrl</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项，用于解析非相对模块名称的基本目录。它可以使你更灵活地组织和引用项目中的文件和模块。</p><h4 id="_1-baseurl-选项的作用" tabindex="-1">1. baseUrl 选项的作用 <a class="header-anchor" href="#_1-baseurl-选项的作用" aria-label="Permalink to &quot;1. baseUrl 选项的作用&quot;">​</a></h4><p><code>baseUrl</code> 选项允许你设置一个基本目录，用于解析项目中的模块和文件。这意味着你可以从该基本目录开始，而不是从每个文件的当前位置开始，来引用模块。</p><p>这个选项特别有用于大型项目，其中文件和模块可能分布在多个目录和子目录中。通过设置一个统一的基本目录，你可以更容易地管理和引用这些文件。</p><h4 id="_2-示例-9" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-9" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-设置-baseurl" tabindex="-1">2.1 设置 baseUrl <a class="header-anchor" href="#_2-1-设置-baseurl" aria-label="Permalink to &quot;2.1 设置 baseUrl&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中设置了 <code>baseUrl</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./src&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./src&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个配置中，<code>baseUrl</code> 被设置为项目的 <code>src</code> 目录。这意味着所有非相对模块导入都将从该目录开始解析。</p><h5 id="_2-2-引用模块" tabindex="-1">2.2 引用模块 <a class="header-anchor" href="#_2-2-引用模块" aria-label="Permalink to &quot;2.2 引用模块&quot;">​</a></h5><p>假设你的项目结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">projectRoot/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── src/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── utils/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── main.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">projectRoot/</span></span>
<span class="line"><span style="color:#24292e;">├── src/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── utils/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── main.ts</span></span>
<span class="line"><span style="color:#24292e;">├── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 <code>math.ts</code> 文件中，你可能有以下代码：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 <code>main.ts</code> 文件中，你可以使用以下导入语句来引用 <code>math.ts</code> 文件：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { add } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;utils/math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 输出 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { add } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;utils/math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 输出 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>由于 <code>baseUrl</code> 被设置为 <code>./src</code>，所以编译器将从 <code>src</code> 目录开始解析 <code>&#39;utils/math&#39;</code> 导入路径。这使得你可以使用更简洁的路径来引用项目中的文件和模块。</p><h3 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h3><p><code>strict</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于启用一组严格的类型检查选项。这有助于捕获更多的潜在错误，并强制编写更健壮的代码。</p><h4 id="_1-strict-选项的作用" tabindex="-1">1. strict 选项的作用 <a class="header-anchor" href="#_1-strict-选项的作用" aria-label="Permalink to &quot;1. strict 选项的作用&quot;">​</a></h4><p>当设置为 <code>true</code> 时，<code>strict</code> 选项会启用一组严格的类型检查规则，包括：</p><ul><li><code>strictNullChecks</code>: 确保 null 和 undefined 值得到正确处理。</li><li><code>strictFunctionTypes</code>: 更严格地检查函数参数的类型。</li><li><code>strictBindCallApply</code>: 检查 <code>bind</code>、<code>call</code> 和 <code>apply</code> 方法的参数。</li><li><code>strictPropertyInitialization</code>: 确保类属性在构造函数中初始化。</li><li><code>noImplicitAny</code>: 防止表达式隐式具有 &quot;any&quot; 类型。</li><li><code>noImplicitThis</code>: 防止 &quot;this&quot; 表达式隐式具有 &quot;any&quot; 类型。</li></ul><h4 id="_2-示例-10" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-10" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-strict" tabindex="-1">2.1 启用 strict <a class="header-anchor" href="#_2-1-启用-strict" aria-label="Permalink to &quot;2.1 启用 strict&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>strict</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_2-2-代码示例" tabindex="-1">2.2 代码示例 <a class="header-anchor" href="#_2-2-代码示例" aria-label="Permalink to &quot;2.2 代码示例&quot;">​</a></h5><p>假设你有以下 TypeScript 文件：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">person</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Hello, \${</span><span style="color:#E1E4E8;">person</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 错误：Argument of type &#39;null&#39; is not assignable to parameter of type &#39;{ name: string; }&#39;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello, \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 错误：Argument of type &#39;null&#39; is not assignable to parameter of type &#39;{ name: string; }&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>由于启用了 <code>strict</code> 选项，尤其是 <code>strictNullChecks</code>，所以传递 <code>null</code> 作为参数会导致类型错误。编译器会强制你确保传递的值符合期望的类型。</p><p><code>strict</code> 选项允许你启用一组严格的类型检查规则，从而提高代码的质量和健壮性。通过捕获更多的潜在错误，它可以帮助你编写更安全、更可维护的代码。</p><p>虽然这个选项可能会使开发过程更具挑战性，特别是在现有项目中启用它可能会暴露许多类型错误，但它通常被认为是一种最佳实践，特别是对于新项目。</p><p>如果你觉得 <code>strict</code> 选项过于严格，你也可以选择单独启用或禁用其中的某些规则，以适应你的项目需求。</p><h3 id="resolvejsonmodule" tabindex="-1">resolveJsonModule <a class="header-anchor" href="#resolvejsonmodule" aria-label="Permalink to &quot;resolveJsonModule&quot;">​</a></h3><p><code>resolveJsonModule</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项，允许你直接导入 JSON 文件作为模块。这样，你可以在 TypeScript 文件中直接使用 JSON 文件的数据，而不需要额外的读取或解析步骤。</p><h4 id="_1-resolvejsonmodule-选项的作用" tabindex="-1">1. resolveJsonModule 选项的作用 <a class="header-anchor" href="#_1-resolvejsonmodule-选项的作用" aria-label="Permalink to &quot;1. resolveJsonModule 选项的作用&quot;">​</a></h4><p>当设置为 <code>true</code> 时，<code>resolveJsonModule</code> 选项允许 TypeScript 编译器将 JSON 文件视为模块，并能够解析和类型检查这些文件。这样，你可以像导入其他 TypeScript 或 JavaScript 文件一样导入 JSON 文件。</p><h4 id="_2-示例-11" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-11" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-resolvejsonmodule" tabindex="-1">2.1 启用 resolveJsonModule <a class="header-anchor" href="#_2-1-启用-resolvejsonmodule" aria-label="Permalink to &quot;2.1 启用 resolveJsonModule&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>resolveJsonModule</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;resolveJsonModule&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;esModuleInterop&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;resolveJsonModule&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;esModuleInterop&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>请注意，通常与 <code>resolveJsonModule</code> 一起使用的还有 <code>esModuleInterop</code> 选项，以确保与 ES6 模块的兼容性。</p><h5 id="_2-2-导入-json-文件" tabindex="-1">2.2 导入 JSON 文件 <a class="header-anchor" href="#_2-2-导入-json-文件" aria-label="Permalink to &quot;2.2 导入 JSON 文件&quot;">​</a></h5><p>假设你有一个名为 <code>config.json</code> 的 JSON 文件，内容如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;appName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;My App&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;appName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;My App&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你可以在 TypeScript 文件中直接导入此 JSON 文件：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./config.json&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`App Name: \${</span><span style="color:#E1E4E8;">config</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">appName</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 输出 &quot;App Name: My App&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Version: \${</span><span style="color:#E1E4E8;">config</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">version</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 输出 &quot;Version: 1.0.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./config.json&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`App Name: \${</span><span style="color:#24292E;">config</span><span style="color:#032F62;">.</span><span style="color:#24292E;">appName</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 输出 &quot;App Name: My App&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Version: \${</span><span style="color:#24292E;">config</span><span style="color:#032F62;">.</span><span style="color:#24292E;">version</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 输出 &quot;Version: 1.0.0&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>编译器将自动解析 JSON 文件的结构，并为导入的 <code>config</code> 对象提供正确的类型。</p><p><code>resolveJsonModule</code> 选项允许你在 TypeScript 项目中直接导入 JSON 文件。这可以简化代码，使你能够更容易地使用 JSON 数据，而无需手动读取或解析文件。</p><p>这个选项特别适用于需要读取配置文件、本地化数据或其他 JSON 格式资源的项目。通过启用此选项，你可以更灵活、更高效地管理和使用这些资源。</p><h3 id="allowsyntheticdefaultimports" tabindex="-1">allowSyntheticDefaultImports <a class="header-anchor" href="#allowsyntheticdefaultimports" aria-label="Permalink to &quot;allowSyntheticDefaultImports&quot;">​</a></h3><p><code>allowSyntheticDefaultImports</code> 是 TypeScript 配置文件 <code>tsconfig.json</code> 中的一个编译选项，用于控制如何处理没有默认导出的模块。这个选项在与 CommonJS 或其他非 ECMAScript 模块系统交互时特别有用。</p><h4 id="_1-allowsyntheticdefaultimports-选项的作用" tabindex="-1">1. allowSyntheticDefaultImports 选项的作用 <a class="header-anchor" href="#_1-allowsyntheticdefaultimports-选项的作用" aria-label="Permalink to &quot;1. allowSyntheticDefaultImports 选项的作用&quot;">​</a></h4><p>当设置为 <code>true</code> 时，<code>allowSyntheticDefaultImports</code> 选项允许你使用 ES6 默认导入语法来导入没有默认导出的模块。这不会影响运行时代码，但允许类型检查器接受这种导入形式。</p><p>这个选项通常与使用 Babel 或其他转换工具的项目一起使用，这些工具在运行时处理这种导入。</p><h4 id="_2-示例-12" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-12" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-启用-allowsyntheticdefaultimports" tabindex="-1">2.1 启用 allowSyntheticDefaultImports <a class="header-anchor" href="#_2-1-启用-allowsyntheticdefaultimports" aria-label="Permalink to &quot;2.1 启用 allowSyntheticDefaultImports&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中启用了 <code>allowSyntheticDefaultImports</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowSyntheticDefaultImports&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowSyntheticDefaultImports&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_2-2-导入没有默认导出的模块" tabindex="-1">2.2 导入没有默认导出的模块 <a class="header-anchor" href="#_2-2-导入没有默认导出的模块" aria-label="Permalink to &quot;2.2 导入没有默认导出的模块&quot;">​</a></h5><p>假设你有一个 CommonJS 模块 <code>myModule.js</code>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 <code>allowSyntheticDefaultImports</code> 设置为 <code>true</code> 时，你可以使用 ES6 默认导入语法来导入此模块：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> myModule </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./myModule&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> myModule </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./myModule&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myModule.foo); </span><span style="color:#6A737D;">// 输出 &#39;bar&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>请注意，这不会更改编译后的代码。编译后的代码仍将使用 CommonJS 的 <code>require</code> 语法。<code>allowSyntheticDefaultImports</code> 仅允许类型检查器接受这种导入形式。</p><h3 id="paths" tabindex="-1">paths <a class="header-anchor" href="#paths" aria-label="Permalink to &quot;paths&quot;">​</a></h3><p><code>paths</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于设置模块的别名路径，使你能够以更简洁的方式引用项目中的文件和目录。它通常与 <code>baseUrl</code> 选项一起使用，以定义这些路径别名的基本目录。</p><h4 id="_1-paths-选项的作用" tabindex="-1">1. paths 选项的作用 <a class="header-anchor" href="#_1-paths-选项的作用" aria-label="Permalink to &quot;1. paths 选项的作用&quot;">​</a></h4><p><code>paths</code> 选项允许你定义一组键值对，其中键是别名，值是相对于 <code>baseUrl</code> 的路径。这样，你可以使用别名来引用文件和目录，而不是使用相对或绝对路径。</p><p>这个选项可以使你的导入语句更简洁，更容易维护，并允许你更灵活地组织项目结构。</p><h4 id="_2-示例-13" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-13" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-设置-paths-和-baseurl" tabindex="-1">2.1 设置 paths 和 baseUrl <a class="header-anchor" href="#_2-1-设置-paths-和-baseurl" aria-label="Permalink to &quot;2.1 设置 paths 和 baseUrl&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中设置了 <code>paths</code> 和 <code>baseUrl</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./src&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;@utils/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;utils/*&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;@components/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;components/*&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./src&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;@utils/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;utils/*&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;@components/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;components/*&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个配置中，<code>baseUrl</code> 被设置为项目的 <code>src</code> 目录，然后定义了两个别名：<code>@utils</code> 和 <code>@components</code>。</p><h5 id="_2-2-使用别名导入模块" tabindex="-1">2.2 使用别名导入模块 <a class="header-anchor" href="#_2-2-使用别名导入模块" aria-label="Permalink to &quot;2.2 使用别名导入模块&quot;">​</a></h5><p>假设你的项目结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">projectRoot/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── src/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── utils/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── components/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── header.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── main.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">projectRoot/</span></span>
<span class="line"><span style="color:#24292e;">├── src/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── utils/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#24292e;">│   ├── components/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── header.ts</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── main.ts</span></span>
<span class="line"><span style="color:#24292e;">├── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 <code>main.ts</code> 文件中，你可以使用定义的别名来导入 <code>math.ts</code> 和 <code>header.ts</code> 文件：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> math </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@utils/math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> header </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@components/header&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用导入的模块</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> math </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@utils/math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> header </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@components/header&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用导入的模块</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这些导入语句使用了在 <code>tsconfig.json</code> 文件中定义的别名，使它们更简洁，更容易理解。</p><h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><p><code>include</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于指定编译器应包括哪些文件或目录进行编译。通过使用这个选项，你可以更精确地控制哪些文件被包括在编译过程中。</p><h4 id="_1-include-选项的作用" tabindex="-1">1. include 选项的作用 <a class="header-anchor" href="#_1-include-选项的作用" aria-label="Permalink to &quot;1. include 选项的作用&quot;">​</a></h4><p><code>include</code> 选项允许你提供一个文件和目录的模式数组，以指定哪些文件应该被 TypeScript 编译器包括在编译过程中。这些模式可以使用通配符来匹配多个文件或目录。</p><p>如果你不提供 <code>include</code> 选项，编译器将默认包括所有 TypeScript 文件（<code>.ts</code> 或 <code>.tsx</code>），除了默认排除的文件外。</p><h4 id="_2-示例-14" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-14" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-设置-include" tabindex="-1">2.1 设置 include <a class="header-anchor" href="#_2-1-设置-include" aria-label="Permalink to &quot;2.1 设置 include&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中设置了 <code>include</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tests/**/*.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tests/**/*.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个配置中，<code>include</code> 选项指定了两个模式：</p><ul><li><code>src/**/*.ts</code>: 包括 <code>src</code> 目录及其所有子目录中的所有 <code>.ts</code> 文件。</li><li><code>tests/**/*.ts</code>: 包括 <code>tests</code> 目录及其所有子目录中的所有 <code>.ts</code> 文件。</li></ul><h5 id="_2-2-项目结构示例" tabindex="-1">2.2 项目结构示例 <a class="header-anchor" href="#_2-2-项目结构示例" aria-label="Permalink to &quot;2.2 项目结构示例&quot;">​</a></h5><p>假设你的项目结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">projectRoot/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── src/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── utils/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tests/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app.test.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── external/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── external.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">projectRoot/</span></span>
<span class="line"><span style="color:#24292e;">├── src/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#24292e;">│   ├── utils/</span></span>
<span class="line"><span style="color:#24292e;">│   │   ├── math.ts</span></span>
<span class="line"><span style="color:#24292e;">├── tests/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app.test.ts</span></span>
<span class="line"><span style="color:#24292e;">├── external/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── external.ts</span></span>
<span class="line"><span style="color:#24292e;">├── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个示例中，由于 <code>include</code> 选项的设置，<code>src</code> 和 <code>tests</code> 目录中的所有 <code>.ts</code> 文件将被包括在编译过程中，而 <code>external</code> 目录中的文件将被排除。</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><p><code>exclude</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中用于指定编译器应排除哪些文件或目录进行编译。通过使用这个选项，你可以更精确地控制哪些文件被排除在编译过程之外。</p><h4 id="_1-exclude-选项的作用" tabindex="-1">1. exclude 选项的作用 <a class="header-anchor" href="#_1-exclude-选项的作用" aria-label="Permalink to &quot;1. exclude 选项的作用&quot;">​</a></h4><p><code>exclude</code> 选项允许你提供一个文件和目录的模式数组，以指定哪些文件应该被 TypeScript 编译器排除在编译过程之外。这些模式可以使用通配符来匹配多个文件或目录。</p><p>如果你不提供 <code>exclude</code> 选项，编译器将默认排除某些文件夹，如 <code>node_modules</code>、<code>bower_components</code>、<code>jspm_packages</code>，以及与 <code>outDir</code> 选项相对应的目录。</p><h4 id="_2-示例-15" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-15" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h4><h5 id="_2-1-设置-exclude" tabindex="-1">2.1 设置 exclude <a class="header-anchor" href="#_2-1-设置-exclude" aria-label="Permalink to &quot;2.1 设置 exclude&quot;">​</a></h5><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中设置了 <code>exclude</code> 选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;exclude&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;node_modules&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;tests/**/*.spec.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;exclude&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;node_modules&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tests/**/*.spec.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个配置中，<code>exclude</code> 选项指定了三个模式：</p><ul><li><code>node_modules</code>: 排除整个 <code>node_modules</code> 目录。</li><li><code>tests/**/*.spec.ts</code>: 排除 <code>tests</code> 目录及其所有子目录中的所有 <code>.spec.ts</code> 文件。</li><li><code>build</code>: 排除整个 <code>build</code> 目录。</li></ul><h5 id="_2-2-项目结构示例-1" tabindex="-1">2.2 项目结构示例 <a class="header-anchor" href="#_2-2-项目结构示例-1" aria-label="Permalink to &quot;2.2 项目结构示例&quot;">​</a></h5><p>假设你的项目结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">projectRoot/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── src/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tests/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app.test.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── app.spec.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">├── node_modules/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── build/</span></span>
<span class="line"><span style="color:#e1e4e8;">├── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">projectRoot/</span></span>
<span class="line"><span style="color:#24292e;">├── src/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#24292e;">├── tests/</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app.test.ts</span></span>
<span class="line"><span style="color:#24292e;">│   ├── app.spec.ts</span></span>
<span class="line"><span style="color:#24292e;">├── node_modules/</span></span>
<span class="line"><span style="color:#24292e;">├── build/</span></span>
<span class="line"><span style="color:#24292e;">├── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个示例中，由于 <code>exclude</code> 选项的设置，<code>node_modules</code>、<code>build</code> 目录以及 <code>tests</code> 目录中的 <code>.spec.ts</code> 文件将被排除在编译过程之外。</p><p><code>exclude</code> 选项允许你在 TypeScript 项目中精确控制哪些文件和目录被排除在编译过程之外。通过使用这个选项，你可以确保只编译需要的文件，从而提高编译效率并减少输出的大小。</p><h3 id="exclude-1" tabindex="-1">exclude <a class="header-anchor" href="#exclude-1" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><p><code>extends</code> 选项在 TypeScript 的 <code>tsconfig.json</code> 文件中允许一个配置文件继承另一个配置文件的设置。这样，你可以创建一个共享的基本配置文件，并在多个项目或配置中重用它。</p><h3 id="_1-extends-选项的作用" tabindex="-1">1. extends 选项的作用 <a class="header-anchor" href="#_1-extends-选项的作用" aria-label="Permalink to &quot;1. extends 选项的作用&quot;">​</a></h3><p><code>extends</code> 选项允许你指定一个要继承的基本配置文件的路径。当前配置文件将继承基本配置文件中的所有设置，并可以覆盖或添加自己的设置。</p><p>这个选项可以使你更容易地在多个项目或配置之间共享通用设置，从而减少重复代码并提高可维护性。</p><h3 id="_2-示例-16" tabindex="-1">2. 示例 <a class="header-anchor" href="#_2-示例-16" aria-label="Permalink to &quot;2. 示例&quot;">​</a></h3><h4 id="_2-1-创建基本配置文件" tabindex="-1">2.1 创建基本配置文件 <a class="header-anchor" href="#_2-1-创建基本配置文件" aria-label="Permalink to &quot;2.1 创建基本配置文件&quot;">​</a></h4><p>假设你有一个名为 <code>base-config.json</code> 的基本配置文件，内容如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;commonjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个文件包含一组通用的编译器选项，可以在多个项目或配置中重用。</p><h4 id="_2-2-使用-extends-继承基本配置" tabindex="-1">2.2 使用 extends 继承基本配置 <a class="header-anchor" href="#_2-2-使用-extends-继承基本配置" aria-label="Permalink to &quot;2.2 使用 extends 继承基本配置&quot;">​</a></h4><p>以下是一个 <code>tsconfig.json</code> 文件的示例，其中使用了 <code>extends</code> 选项来继承上述基本配置文件：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./base-config.json&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;extends&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./base-config.json&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个配置中，<code>extends</code> 选项指定了基本配置文件的路径。当前配置文件将继承基本配置文件中的所有编译器选项，并添加了自己的 <code>outDir</code> 和 <code>include</code> 设置。</p><p>结果配置将等效于以下内容：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;commonjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;src/**/*.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/**/*.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>extends</code> 选项允许你在 TypeScript 项目中创建和重用基本配置文件。通过使用这个选项，你可以减少重复的配置代码，使项目结构更清晰，更容易维护。</p><p>这个选项特别适用于具有多个子项目或需要共享通用设置的大型项目。通过创建一个或多个基本配置文件，你可以确保项目之间的一致性，并更容易地更新和管理通用设置。</p><h2 id="tsconfig-json-默认配置" tabindex="-1">tsconfig.json 默认配置 <a class="header-anchor" href="#tsconfig-json-默认配置" aria-label="Permalink to &quot;tsconfig.json 默认配置&quot;">​</a></h2><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 访问 https://aka.ms/tsconfig 了解更多关于这个文件的信息 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 项目 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;incremental&quot;: true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;composite&quot;: true,                                /* 启用允许将 TypeScript 项目与项目引用一起使用的约束。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* 指定 .tsbuildinfo 增量编译文件的路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* 在引用组合项目时禁用首选源文件而不是声明文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;disableSolutionSearching&quot;: true,                 /* 在编辑时，将一个项目排除在多项目引用检查之外。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;disableReferencedProjectLoad&quot;: true,             /* 减少 TypeScript 自动加载的项目数量。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 语言和环境 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;es2016&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 设置生成的 JavaScript 的 JavaScript 语言版本并包含兼容的库声明。 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;lib&quot;: [],                                        /* 指定一组打包的库声明文件，描述目标运行时环境。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* 指定生成的 JSX 代码。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;experimentalDecorators&quot;: true,                   /* 启用对传统实验性装饰器的实验性支持。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;emitDecoratorMetadata&quot;: true,                    /* 为源文件中的装饰器声明生成设计类型元数据。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* 指定在目标为 React JSX 时使用的 JSX 工厂函数，例如 &#39;React.createElement&#39; 或 &#39;h&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* 指定在目标为 React JSX 时用于片段的 JSX Fragments 引用，例如 &#39;React.Fragment&#39; 或 &#39;Fragment&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* 指定在使用 &#39;jsx: react-jsx*&#39; 时导入 JSX 工厂函数的模块规范符号。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* 指定为 &#39;createElement&#39; 调用的对象。仅适用于目标为 &#39;react&#39; JSX。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noLib&quot;: true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;useDefineForClassFields&quot;: true,                  /* 生成符合 ECMAScript 标准的类字段语法。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* 控制如何检测模块格式的 JavaScript 文件。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 模块 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;commonjs&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 指定生成的模块代码。 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* 指定源文件的根文件夹。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;moduleResolution&quot;: &quot;node10&quot;,                     /* 指定 TypeScript 如何从给定的模块规范符号查找文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* 指定用于解析非相对模块名的基本目录。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;paths&quot;: {},                                      /* 指定重新映射导入到其他查找位置的条目集合。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;rootDirs&quot;: [],                                   /* 当解析模块时，允许将多个文件夹视为一个文件夹。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;typeRoots&quot;: [],                                  /* 指定多个像 &#39;./node_modules/@types&#39; 一样的文件夹。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;types&quot;: [],                                      /* 指定要在源文件中包含但不在引用中引用的类型包名称。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowUmdGlobalAccess&quot;: true,                     /* 允许从模块访问 UMD 全局变量。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;moduleSuffixes&quot;: [],                             /* 解析模块时要搜索的文件名后缀列表。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowImportingTsExtensions&quot;: true,               /* 允许导入包含 TypeScript 文件扩展名的文件。 需要设置 &#39;--moduleResolution bundler&#39; 以及 &#39;--noEmit&#39; 或 &#39;--emitDeclarationOnly&#39; 参数。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;resolvePackageJsonExports&quot;: true,                /* 解析包导入时使用 package.json 的 &#39;exports&#39; 字段。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;resolvePackageJsonImports&quot;: true,                /* 解析导入时使用 package.json 的 &#39;imports&#39; 字段。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;customConditions&quot;: [],                           /* 解析导入时要设置的自定义条件，以补充特定解析器的默认值。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;resolveJsonModule&quot;: true,                        /* 启用导入 .json 文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowArbitraryExtensions&quot;: true,                 /* 启用使用任何扩展名导入文件，前提是存在声明文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noResolve&quot;: true,                                /* 禁止 &#39;import&#39;、&#39;require&#39; 或 &#39;&lt;reference&gt;&#39; 扩展 TypeScript 应添加到项目中的文件数。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* JavaScript 支持 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowJs&quot;: true,                                  /* 允许将 JavaScript 文件作为程序的一部分。使用 &#39;checkJS&#39; 选项从这些文件中获取错误。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;checkJs&quot;: true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* 指定从 &#39;node_modules&#39; 检查 JavaScript 文件时使用的最大文件夹深度。仅适用于 &#39;allowJs&#39;。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 生成 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;declaration&quot;: true,                              /* 从 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;declarationMap&quot;: true,                           /* 为 .d.ts 文件创建源映射。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;emitDeclarationOnly&quot;: true,                      /* 只输出 .d.ts 文件，而不是 JavaScript 文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;sourceMap&quot;: true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;inlineSourceMap&quot;: true,                          /* 在生成的 JavaScript 内部包含源映射文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;outFile&quot;: &quot;./&quot;,                                  /* 指定一个文件，将所有输出打包为一个 JavaScript 文件。如果 &#39;declaration&#39; 设置为 true，也指定一个打包所有 .d.ts 输出的文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;outDir&quot;: &quot;./&quot;,                                   /* 指定所有生成文件的输出文件夹。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;removeComments&quot;: true,                           /* 禁用生成注释。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noEmit&quot;: true,                                   /* 禁用编译输出文件。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;importHelpers&quot;: true,                            /* 允许每个项目从 tslib 导入帮助函数，而不是每个文件都要包含它们。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* 指定导入仅用于类型的 emit/检查行为。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;downlevelIteration&quot;: true,                       /* 为迭代生成符合规范但冗长且性能较低的 JavaScript 代码。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* 指定调试器查找源引用代码的根路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* 指定调试器应在其中查找映射文件的位置，而不是生成的位置。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;inlineSources&quot;: true,                            /* 在生成的 JavaScript 中包含源代码。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;emitBOM&quot;: true,                                  /* 在输出文件开头生成 UTF-8 字节顺序标记 (BOM)。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* 设置生成文件的换行字符。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;stripInternal&quot;: true,                            /* 禁用已在其 JSDoc 注释中包含 &#39;@internal&#39; 的声明。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noEmitHelpers&quot;: true,                            /* 禁用在编译输出中生成自定义帮助函数，如 &#39;__extends&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noEmitOnError&quot;: true,                            /* 如果有任何类型检查错误报告，则禁用编译文件的输出。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;preserveConstEnums&quot;: true,                       /* 禁用在生成的代码中擦除 &#39;const enum&#39; 声明。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* 指定生成的声明文件的输出目录。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;preserveValueImports&quot;: true,                     /* 保留 JavaScript 输出中未使用的导入值，否则这些值将被删除。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 互操作性限制 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;isolatedModules&quot;: true,                          /* 确保每个文件都可以安全地进行转译，而不依赖其他导入。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;verbatimModuleSyntax&quot;: true,                     /* 不要转换或删除任何未标记为仅类型的导入或导出，确保以输出文件的格式编写。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowSyntheticDefaultImports&quot;: true,             /* 允许在模块没有默认导出时使用 &#39;import x from y&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;esModuleInterop&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 生成额外的 JavaScript 代码，以便支持导入 CommonJS 模块。这启用了 &#39;allowSyntheticDefaultImports&#39;以实现类型兼容性。 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;preserveSymlinks&quot;: true,                         /* 禁止将符号链接解析为其实际路径。这与 Node 中的同名标志相对应。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;forceConsistentCasingInFileNames&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 确保导入时的大小写正确。 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 类型检查 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 启用所有严格的类型检查选项。 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noImplicitAny&quot;: true,                            /* 启用对具有隐含 &#39;any&#39; 类型的表达式和声明的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;strictNullChecks&quot;: true,                         /* 在类型检查时考虑 &#39;null&#39; 和 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;strictFunctionTypes&quot;: true,                      /* 分配函数时，检查参数和返回值是否是子类型兼容的。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;strictBindCallApply&quot;: true,                      /* 检查 &#39;bind&#39;、&#39;call&#39; 和 &#39;apply&#39; 方法的参数是否与原始函数匹配。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;strictPropertyInitialization&quot;: true,             /* 检查类属性是否在构造函数中声明但未设置。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noImplicitThis&quot;: true,                           /* 启用当 &#39;this&#39; 具有类型 &#39;any&#39; 时的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;useUnknownInCatchVariables&quot;: true,               /* 在 catch 子句的变量中默认使用 &#39;unknown&#39;，而不是 &#39;any&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;alwaysStrict&quot;: true,                             /* 确保始终生成 &#39;use strict&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noUnusedLocals&quot;: true,                           /* 启用在未使用局部变量时的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noUnusedParameters&quot;: true,                       /* 强制错误报告函数参数未使用的错误。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;exactOptionalPropertyTypes&quot;: true,               /* 按照编写时的方式解释可选属性类型，而不是添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noImplicitReturns&quot;: true,                        /* 启用对函数中未显式返回的路径的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* 启用对 switch 语句中落空案例的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* 当使用索引访问时，向类型添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noImplicitOverride&quot;: true,                       /* 确保派生类中重写的成员带有 override 修饰符。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* 对使用索引类型声明的键强制使用索引访问器。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowUnusedLabels&quot;: true,                        /* 禁用对未使用标签的错误报告。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowUnreachableCode&quot;: true,                     /* 禁用对不可达代码的错误报告。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 完备性 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;skipDefaultLibCheck&quot;: true,                      /* 跳过对 TypeScript 包含的 .d.ts 文件进行类型检查。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;skipLibCheck&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 跳过对所有 .d.ts 文件进行类型检查。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 访问 https://aka.ms/tsconfig 了解更多关于这个文件的信息 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 项目 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;incremental&quot;: true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;composite&quot;: true,                                /* 启用允许将 TypeScript 项目与项目引用一起使用的约束。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;tsBuildInfoFile&quot;: &quot;./.tsbuildinfo&quot;,              /* 指定 .tsbuildinfo 增量编译文件的路径。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* 在引用组合项目时禁用首选源文件而不是声明文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;disableSolutionSearching&quot;: true,                 /* 在编辑时，将一个项目排除在多项目引用检查之外。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;disableReferencedProjectLoad&quot;: true,             /* 减少 TypeScript 自动加载的项目数量。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 语言和环境 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es2016&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 设置生成的 JavaScript 的 JavaScript 语言版本并包含兼容的库声明。 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;lib&quot;: [],                                        /* 指定一组打包的库声明文件，描述目标运行时环境。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;jsx&quot;: &quot;preserve&quot;,                                /* 指定生成的 JSX 代码。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;experimentalDecorators&quot;: true,                   /* 启用对传统实验性装饰器的实验性支持。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;emitDecoratorMetadata&quot;: true,                    /* 为源文件中的装饰器声明生成设计类型元数据。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;jsxFactory&quot;: &quot;&quot;,                                 /* 指定在目标为 React JSX 时使用的 JSX 工厂函数，例如 &#39;React.createElement&#39; 或 &#39;h&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* 指定在目标为 React JSX 时用于片段的 JSX Fragments 引用，例如 &#39;React.Fragment&#39; 或 &#39;Fragment&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;jsxImportSource&quot;: &quot;&quot;,                            /* 指定在使用 &#39;jsx: react-jsx*&#39; 时导入 JSX 工厂函数的模块规范符号。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;reactNamespace&quot;: &quot;&quot;,                             /* 指定为 &#39;createElement&#39; 调用的对象。仅适用于目标为 &#39;react&#39; JSX。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noLib&quot;: true,                                    /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;useDefineForClassFields&quot;: true,                  /* 生成符合 ECMAScript 标准的类字段语法。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;moduleDetection&quot;: &quot;auto&quot;,                        /* 控制如何检测模块格式的 JavaScript 文件。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 模块 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 指定生成的模块代码。 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;rootDir&quot;: &quot;./&quot;,                                  /* 指定源文件的根文件夹。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;moduleResolution&quot;: &quot;node10&quot;,                     /* 指定 TypeScript 如何从给定的模块规范符号查找文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;baseUrl&quot;: &quot;./&quot;,                                  /* 指定用于解析非相对模块名的基本目录。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;paths&quot;: {},                                      /* 指定重新映射导入到其他查找位置的条目集合。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;rootDirs&quot;: [],                                   /* 当解析模块时，允许将多个文件夹视为一个文件夹。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;typeRoots&quot;: [],                                  /* 指定多个像 &#39;./node_modules/@types&#39; 一样的文件夹。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;types&quot;: [],                                      /* 指定要在源文件中包含但不在引用中引用的类型包名称。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowUmdGlobalAccess&quot;: true,                     /* 允许从模块访问 UMD 全局变量。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;moduleSuffixes&quot;: [],                             /* 解析模块时要搜索的文件名后缀列表。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowImportingTsExtensions&quot;: true,               /* 允许导入包含 TypeScript 文件扩展名的文件。 需要设置 &#39;--moduleResolution bundler&#39; 以及 &#39;--noEmit&#39; 或 &#39;--emitDeclarationOnly&#39; 参数。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;resolvePackageJsonExports&quot;: true,                /* 解析包导入时使用 package.json 的 &#39;exports&#39; 字段。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;resolvePackageJsonImports&quot;: true,                /* 解析导入时使用 package.json 的 &#39;imports&#39; 字段。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;customConditions&quot;: [],                           /* 解析导入时要设置的自定义条件，以补充特定解析器的默认值。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;resolveJsonModule&quot;: true,                        /* 启用导入 .json 文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowArbitraryExtensions&quot;: true,                 /* 启用使用任何扩展名导入文件，前提是存在声明文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noResolve&quot;: true,                                /* 禁止 &#39;import&#39;、&#39;require&#39; 或 &#39;&lt;reference&gt;&#39; 扩展 TypeScript 应添加到项目中的文件数。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* JavaScript 支持 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowJs&quot;: true,                                  /* 允许将 JavaScript 文件作为程序的一部分。使用 &#39;checkJS&#39; 选项从这些文件中获取错误。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;checkJs&quot;: true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;maxNodeModuleJsDepth&quot;: 1,                        /* 指定从 &#39;node_modules&#39; 检查 JavaScript 文件时使用的最大文件夹深度。仅适用于 &#39;allowJs&#39;。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 生成 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;declaration&quot;: true,                              /* 从 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;declarationMap&quot;: true,                           /* 为 .d.ts 文件创建源映射。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;emitDeclarationOnly&quot;: true,                      /* 只输出 .d.ts 文件，而不是 JavaScript 文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;sourceMap&quot;: true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;inlineSourceMap&quot;: true,                          /* 在生成的 JavaScript 内部包含源映射文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;outFile&quot;: &quot;./&quot;,                                  /* 指定一个文件，将所有输出打包为一个 JavaScript 文件。如果 &#39;declaration&#39; 设置为 true，也指定一个打包所有 .d.ts 输出的文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;outDir&quot;: &quot;./&quot;,                                   /* 指定所有生成文件的输出文件夹。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;removeComments&quot;: true,                           /* 禁用生成注释。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noEmit&quot;: true,                                   /* 禁用编译输出文件。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;importHelpers&quot;: true,                            /* 允许每个项目从 tslib 导入帮助函数，而不是每个文件都要包含它们。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* 指定导入仅用于类型的 emit/检查行为。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;downlevelIteration&quot;: true,                       /* 为迭代生成符合规范但冗长且性能较低的 JavaScript 代码。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;sourceRoot&quot;: &quot;&quot;,                                 /* 指定调试器查找源引用代码的根路径。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;mapRoot&quot;: &quot;&quot;,                                    /* 指定调试器应在其中查找映射文件的位置，而不是生成的位置。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;inlineSources&quot;: true,                            /* 在生成的 JavaScript 中包含源代码。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;emitBOM&quot;: true,                                  /* 在输出文件开头生成 UTF-8 字节顺序标记 (BOM)。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;newLine&quot;: &quot;crlf&quot;,                                /* 设置生成文件的换行字符。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;stripInternal&quot;: true,                            /* 禁用已在其 JSDoc 注释中包含 &#39;@internal&#39; 的声明。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noEmitHelpers&quot;: true,                            /* 禁用在编译输出中生成自定义帮助函数，如 &#39;__extends&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noEmitOnError&quot;: true,                            /* 如果有任何类型检查错误报告，则禁用编译文件的输出。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;preserveConstEnums&quot;: true,                       /* 禁用在生成的代码中擦除 &#39;const enum&#39; 声明。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;declarationDir&quot;: &quot;./&quot;,                           /* 指定生成的声明文件的输出目录。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;preserveValueImports&quot;: true,                     /* 保留 JavaScript 输出中未使用的导入值，否则这些值将被删除。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 互操作性限制 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;isolatedModules&quot;: true,                          /* 确保每个文件都可以安全地进行转译，而不依赖其他导入。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;verbatimModuleSyntax&quot;: true,                     /* 不要转换或删除任何未标记为仅类型的导入或导出，确保以输出文件的格式编写。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowSyntheticDefaultImports&quot;: true,             /* 允许在模块没有默认导出时使用 &#39;import x from y&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;esModuleInterop&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 生成额外的 JavaScript 代码，以便支持导入 CommonJS 模块。这启用了 &#39;allowSyntheticDefaultImports&#39;以实现类型兼容性。 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;preserveSymlinks&quot;: true,                         /* 禁止将符号链接解析为其实际路径。这与 Node 中的同名标志相对应。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;forceConsistentCasingInFileNames&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 确保导入时的大小写正确。 */</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 类型检查 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 启用所有严格的类型检查选项。 */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noImplicitAny&quot;: true,                            /* 启用对具有隐含 &#39;any&#39; 类型的表达式和声明的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;strictNullChecks&quot;: true,                         /* 在类型检查时考虑 &#39;null&#39; 和 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;strictFunctionTypes&quot;: true,                      /* 分配函数时，检查参数和返回值是否是子类型兼容的。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;strictBindCallApply&quot;: true,                      /* 检查 &#39;bind&#39;、&#39;call&#39; 和 &#39;apply&#39; 方法的参数是否与原始函数匹配。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;strictPropertyInitialization&quot;: true,             /* 检查类属性是否在构造函数中声明但未设置。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noImplicitThis&quot;: true,                           /* 启用当 &#39;this&#39; 具有类型 &#39;any&#39; 时的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;useUnknownInCatchVariables&quot;: true,               /* 在 catch 子句的变量中默认使用 &#39;unknown&#39;，而不是 &#39;any&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;alwaysStrict&quot;: true,                             /* 确保始终生成 &#39;use strict&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noUnusedLocals&quot;: true,                           /* 启用在未使用局部变量时的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noUnusedParameters&quot;: true,                       /* 强制错误报告函数参数未使用的错误。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;exactOptionalPropertyTypes&quot;: true,               /* 按照编写时的方式解释可选属性类型，而不是添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noImplicitReturns&quot;: true,                        /* 启用对函数中未显式返回的路径的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noFallthroughCasesInSwitch&quot;: true,               /* 启用对 switch 语句中落空案例的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noUncheckedIndexedAccess&quot;: true,                 /* 当使用索引访问时，向类型添加 &#39;undefined&#39;。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noImplicitOverride&quot;: true,                       /* 确保派生类中重写的成员带有 override 修饰符。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* 对使用索引类型声明的键强制使用索引访问器。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowUnusedLabels&quot;: true,                        /* 禁用对未使用标签的错误报告。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowUnreachableCode&quot;: true,                     /* 禁用对不可达代码的错误报告。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 完备性 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;skipDefaultLibCheck&quot;: true,                      /* 跳过对 TypeScript 包含的 .d.ts 文件进行类型检查。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;skipLibCheck&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 跳过对所有 .d.ts 文件进行类型检查。 */</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>`,321);function m(q,h,F,v,g,C){const l=e,n=i("ClientOnly"),p=t,o=c;return E(),u("div",null,[b,s(n,null,{default:a(()=>[s(l)]),_:1}),s(n,null,{default:a(()=>[s(p)]),_:1}),s(n,null,{default:a(()=>[s(o)]),_:1})])}const S=r(d,[["render",m]]);export{D as __pageData,S as default};
