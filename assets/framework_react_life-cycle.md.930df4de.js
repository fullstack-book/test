import{_ as c,a as i,b as d}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.052e419c.js";import{_ as E,C as y,o as h,c as u,H as s,w as n,k as e,a as l,Q as m}from"./chunks/framework.27021b64.js";import{_ as b}from"./chunks/index.e5e15ed4.js";import"./chunks/CloseOutlined.9c3246b4.js";import"./chunks/isObjectLike.46b91259.js";import"./chunks/Serializer.fad5b415.js";import"./chunks/LeftOutlined.9040821c.js";import"./chunks/EyeOutlined.53cc40ff.js";const O=JSON.parse('{"title":"React 生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react/life-cycle.md","filePath":"framework/react/life-cycle.md","lastUpdated":1692259157000}'),v={name:"framework/react/life-cycle.md"},F=e("h1",{id:"react-生命周期",tabindex:"-1"},[l("React 生命周期 "),e("a",{class:"header-anchor",href:"#react-生命周期","aria-label":'Permalink to "React 生命周期"'},"​")],-1),g=e("h2",{id:"react-生命周期流程图",tabindex:"-1"},[l("React 生命周期流程图 "),e("a",{class:"header-anchor",href:"#react-生命周期流程图","aria-label":'Permalink to "React 生命周期流程图"'},"​")],-1),C=m(`<p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noreferrer">React 生命周期线上地址</a></p><h2 id="react-component-构造函数" tabindex="-1">React.Component 构造函数 <a class="header-anchor" href="#react-component-构造函数" aria-label="Permalink to &quot;React.Component 构造函数&quot;">​</a></h2><h4 id="_1-目的" tabindex="-1">1. 目的 <a class="header-anchor" href="#_1-目的" aria-label="Permalink to &quot;1. 目的&quot;">​</a></h4><p>构造函数在 React 组件的生命周期中非常早期被调用，它发生在组件实例被创建并插入到 DOM 之前。这使得它成为初始化组件的本地状态和绑定事件处理函数的理想位置。</p><h4 id="_2-使用" tabindex="-1">2. 使用 <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2. 使用&quot;">​</a></h4><p>如果您的组件不需要初始化状态或绑定事件处理函数，那么您不需要显式地定义一个构造函数。但是，如果您确实这样做了，那么在构造函数的第一行调用<code>super(props)</code>是必要的。</p><h4 id="_3-为什么要调用-super-props" tabindex="-1">3. 为什么要调用 <code>super(props)</code>？ <a class="header-anchor" href="#_3-为什么要调用-super-props" aria-label="Permalink to &quot;3. 为什么要调用 \`super(props)\`？&quot;">​</a></h4><p>在 JavaScript 类中，子类的构造函数必须在使用<code>this</code>之前调用<code>super</code>。在 React 组件中，<code>super</code>引用的是<code>React.Component</code>的构造函数。调用<code>super(props)</code>确保您可以在构造函数中使用<code>this.props</code>。</p><h4 id="_4-初始化状态" tabindex="-1">4. 初始化状态 <a class="header-anchor" href="#_4-初始化状态" aria-label="Permalink to &quot;4. 初始化状态&quot;">​</a></h4><p>构造函数是为<code>this.state</code>设置初始值的地方。这是通过直接为<code>this.state</code>分配一个对象来完成的。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { counter: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请注意，您不应该在构造函数中调用<code>setState()</code>。</p><h4 id="_5-绑定事件处理函数" tabindex="-1">5. 绑定事件处理函数 <a class="header-anchor" href="#_5-绑定事件处理函数" aria-label="Permalink to &quot;5. 绑定事件处理函数&quot;">​</a></h4><p>为了确保事件处理函数中的<code>this</code>引用的是组件实例，您需要在构造函数中绑定它。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleClick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleClick.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleClick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleClick.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_6-避免的做法" tabindex="-1">6. 避免的做法 <a class="header-anchor" href="#_6-避免的做法" aria-label="Permalink to &quot;6. 避免的做法&quot;">​</a></h4><ul><li><strong>不要在构造函数中调用<code>setState()</code></strong>：这是因为<code>this.state</code>可以直接在构造函数中进行初始化。</li><li><strong>避免引入副作用或订阅</strong>：构造函数不是执行网络请求、设置订阅或手动更改 DOM 的地方。这些都应该在<code>componentDidMount()</code>或其他生命周期方法中进行。</li><li><strong>避免将 props 直接复制到 state</strong>：这是因为当 props 更改时，state 不会自动更新，可能导致组件的渲染状态与 props 不同步。</li></ul><h4 id="_7-示例代码" tabindex="-1">7. 示例代码 <a class="header-anchor" href="#_7-示例代码" aria-label="Permalink to &quot;7. 示例代码&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { counter: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleClick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleClick.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handleClick</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...其他方法和渲染逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(props);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleClick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleClick.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handleClick</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...其他方法和渲染逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_8-不使用构造函数的替代方法" tabindex="-1">8. 不使用构造函数的替代方法 <a class="header-anchor" href="#_8-不使用构造函数的替代方法" aria-label="Permalink to &quot;8. 不使用构造函数的替代方法&quot;">​</a></h4><p><code>constructor</code>在 React 组件中是可以省略的。但是，是否省略取决于您的组件需要执行哪些初始化操作。以下是一些情况说明：</p><h5 id="不需要初始化状态-也不需要绑定方法" tabindex="-1">不需要初始化状态，也不需要绑定方法 <a class="header-anchor" href="#不需要初始化状态-也不需要绑定方法" aria-label="Permalink to &quot;不需要初始化状态，也不需要绑定方法&quot;">​</a></h5><p>如果您的组件不需要初始化本地状态，并且您也不需要绑定任何方法到组件实例，那么您可以完全省略<code>constructor</code>。</p><h5 id="使用类属性" tabindex="-1">使用类属性 <a class="header-anchor" href="#使用类属性" aria-label="Permalink to &quot;使用类属性&quot;">​</a></h5><p>在现代的 React 版本中，您可以使用类属性来初始化状态，而不需要显式的<code>constructor</code>。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { counter: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...其他代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="使用箭头函数自动绑定方法" tabindex="-1">使用箭头函数自动绑定方法 <a class="header-anchor" href="#使用箭头函数自动绑定方法" aria-label="Permalink to &quot;使用箭头函数自动绑定方法&quot;">​</a></h5><p>如果您使用箭头函数定义方法，那么这些方法会自动绑定到当前实例，因此不需要在<code>constructor</code>中进行绑定。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">handleClick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">handleClick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...其他代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>综上所述，如果您使用类属性和箭头函数，那么在许多情况下，您都可以省略<code>constructor</code>。但是，如果您需要执行更复杂的初始化逻辑，或者需要在创建组件实例时执行某些操作，那么仍然需要<code>constructor</code>。</p><h2 id="getderivedstatefromprops" tabindex="-1">getDerivedStateFromProps <a class="header-anchor" href="#getderivedstatefromprops" aria-label="Permalink to &quot;getDerivedStateFromProps&quot;">​</a></h2><p>在 React 的世界里，组件的属性（props）和状态（state）是核心概念。有时，我们需要根据属性的变化来更新状态。这就是<code>getDerivedStateFromProps</code>方法的舞台。</p><h3 id="什么是getderivedstatefromprops" tabindex="-1">什么是<code>getDerivedStateFromProps</code>？ <a class="header-anchor" href="#什么是getderivedstatefromprops" aria-label="Permalink to &quot;什么是\`getDerivedStateFromProps\`？&quot;">​</a></h3><p><code>getDerivedStateFromProps</code>是 React 组件的一个静态生命周期方法。它允许我们在组件接收新的属性时更新状态。这个方法在组件的挂载和更新阶段都会被调用。</p><h3 id="执行时机" tabindex="-1">执行时机 <a class="header-anchor" href="#执行时机" aria-label="Permalink to &quot;执行时机&quot;">​</a></h3><h4 id="_1-挂载阶段-mounting" tabindex="-1">1. 挂载阶段（Mounting） <a class="header-anchor" href="#_1-挂载阶段-mounting" aria-label="Permalink to &quot;1. 挂载阶段（Mounting）&quot;">​</a></h4><p>当组件实例被创建并插入到 DOM 中时，<code>getDerivedStateFromProps</code>会在<code>render</code>方法之前被调用。这允许您根据组件的初始属性来设置组件的初始状态。</p><h4 id="_2-更新阶段-updating" tabindex="-1">2. 更新阶段（Updating） <a class="header-anchor" href="#_2-更新阶段-updating" aria-label="Permalink to &quot;2. 更新阶段（Updating）&quot;">​</a></h4><p>当组件接收到新的属性或状态更改时，<code>getDerivedStateFromProps</code>也会被调用。具体来说，它会在以下情况下被调用：</p><ul><li>当组件接收到新的属性时（即父组件重新渲染）。</li><li>当您调用<code>setState</code>方法更新组件的状态时。</li><li>当您调用<code>forceUpdate</code>方法强制重新渲染组件时。</li></ul><p>在这些情况下，<code>getDerivedStateFromProps</code>都会在<code>render</code>方法之前被调用，允许您根据新的属性或状态来更新组件的状态。</p><h3 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h3><ul><li><strong>nextProps</strong>：组件即将接收的新属性。</li><li><strong>prevState</strong>：组件当前的状态。</li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><ul><li>返回一个对象来更新状态。</li><li>如果不需要更新状态，则返回 null。</li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ol><li><strong>属性派生状态</strong>：当组件的内部状态需要从属性派生时。 假设您有一个主题组件，它的颜色可以通过属性来控制，但也可以由用户在组件内部更改。</li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThemeComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { color: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.color };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDerivedStateFromProps</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nextProps</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevState</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nextProps.color </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> prevState.color) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { color: nextProps.color };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ backgroundColor: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.color }}&gt;主题颜色&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThemeComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { color: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.color };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDerivedStateFromProps</span><span style="color:#24292E;">(</span><span style="color:#E36209;">nextProps</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prevState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nextProps.color </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> prevState.color) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { color: nextProps.color };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ backgroundColor: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.color }}&gt;主题颜色&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="2"><li><strong>条件渲染</strong>：根据属性控制组件的渲染。 假设一个权限控制组件可能会根据传入的权限级别显示或隐藏某些功能。</li></ol><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PermissionComponent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { isAdmin: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.isAdmin };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDerivedStateFromProps</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nextProps</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevState</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nextProps.isAdmin </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> prevState.isAdmin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { isAdmin: nextProps.isAdmin };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state.isAdmin </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">AdminFeatures</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">UserFeatures</span><span style="color:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PermissionComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { isAdmin: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.isAdmin };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDerivedStateFromProps</span><span style="color:#24292E;">(</span><span style="color:#E36209;">nextProps</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prevState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nextProps.isAdmin </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> prevState.isAdmin) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { isAdmin: nextProps.isAdmin };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state.isAdmin </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">AdminFeatures</span><span style="color:#24292E;"> /&gt; </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">UserFeatures</span><span style="color:#24292E;"> /&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>getDerivedStateFromProps 是一个静态方法，因此它不能访问组件实例的 this。这意味着您不能在此方法中调用组件的实例方法或访问组件的实例属性。</li><li>由于 getDerivedStateFromProps 在多个阶段都可能被调用，因此您可能需要添加额外的逻辑来确定何时应该更新状态。</li><li>getDerivedStateFromProps 应该是一个纯函数，不要在其中执行有副作用的操作，如网络请求或订阅事件。</li></ul><h2 id="shouldcomponentupdate" tabindex="-1">shouldComponentUpdate <a class="header-anchor" href="#shouldcomponentupdate" aria-label="Permalink to &quot;shouldComponentUpdate&quot;">​</a></h2><h3 id="_1-基本用法" tabindex="-1">1. 基本用法 <a class="header-anchor" href="#_1-基本用法" aria-label="Permalink to &quot;1. 基本用法&quot;">​</a></h3><p><code>shouldComponentUpdate</code> 是一个可选的生命周期方法，用于在接收新的 props 或 state 时确定组件是否应该重新渲染。它返回一个布尔值，告诉 React 是否应继续更新过程。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">shouldComponentUpdate</span><span style="color:#E1E4E8;">(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 逻辑判断</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> 或 </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">shouldComponentUpdate</span><span style="color:#24292E;">(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 逻辑判断</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> 或 </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-性能优化" tabindex="-1">2. 性能优化 <a class="header-anchor" href="#_2-性能优化" aria-label="Permalink to &quot;2. 性能优化&quot;">​</a></h3><h4 id="a-避免不必要的渲染" tabindex="-1">a. 避免不必要的渲染 <a class="header-anchor" href="#a-避免不必要的渲染" aria-label="Permalink to &quot;a. 避免不必要的渲染&quot;">​</a></h4><p>如果您的组件经常接收相同的 props 或 state，但不需要每次都重新渲染，那么 <code>shouldComponentUpdate</code> 就派上用场了。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">shouldComponentUpdate</span><span style="color:#E1E4E8;">(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nextProps.value </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">shouldComponentUpdate</span><span style="color:#24292E;">(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nextProps.value </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="b-自定义比较逻辑" tabindex="-1">b. 自定义比较逻辑 <a class="header-anchor" href="#b-自定义比较逻辑" aria-label="Permalink to &quot;b. 自定义比较逻辑&quot;">​</a></h4><p>您可以根据需要编写自定义的比较逻辑，只有在满足特定条件时才重新渲染。</p><h3 id="_3-与-purecomponent-的关系" tabindex="-1">3. 与 PureComponent 的关系 <a class="header-anchor" href="#_3-与-purecomponent-的关系" aria-label="Permalink to &quot;3. 与 PureComponent 的关系&quot;">​</a></h3><p><code>React.PureComponent</code> 通过浅比较 props 和 state 来自动实现 <code>shouldComponentUpdate</code>。如果您的组件继承自 <code>PureComponent</code>，则不需要手动实现此方法。</p><h3 id="_4-执行时机" tabindex="-1">4. 执行时机 <a class="header-anchor" href="#_4-执行时机" aria-label="Permalink to &quot;4. 执行时机&quot;">​</a></h3><h4 id="_1-接收新的-props-或-state" tabindex="-1">1. 接收新的 Props 或 State <a class="header-anchor" href="#_1-接收新的-props-或-state" aria-label="Permalink to &quot;1. 接收新的 Props 或 State&quot;">​</a></h4><p>当组件接收到新的 props 或 state 时，<code>shouldComponentUpdate</code> 将被调用。这是一个决策点，让您可以判断是否真的需要重新渲染组件。</p><h4 id="_2-父组件重新渲染" tabindex="-1">2. 父组件重新渲染 <a class="header-anchor" href="#_2-父组件重新渲染" aria-label="Permalink to &quot;2. 父组件重新渲染&quot;">​</a></h4><p>当父组件重新渲染时，子组件的 <code>shouldComponentUpdate</code> 也会被调用。这样，您可以控制子组件是否随父组件一起重新渲染。</p><h4 id="_3-使用-forceupdate" tabindex="-1">3. 使用 <code>forceUpdate</code> <a class="header-anchor" href="#_3-使用-forceupdate" aria-label="Permalink to &quot;3. 使用 \`forceUpdate\`&quot;">​</a></h4><p>如果您调用了组件的 <code>forceUpdate</code> 方法，<code>shouldComponentUpdate</code> 将被跳过，组件将强制重新渲染。</p><h4 id="_4-初始化渲染" tabindex="-1">4. 初始化渲染 <a class="header-anchor" href="#_4-初始化渲染" aria-label="Permalink to &quot;4. 初始化渲染&quot;">​</a></h4><p>值得注意的是，<code>shouldComponentUpdate</code> 不会在组件的初始化渲染阶段被调用。它仅在组件的更新阶段起作用。</p><h3 id="_5-注意事项和最佳实践" tabindex="-1">5. 注意事项和最佳实践 <a class="header-anchor" href="#_5-注意事项和最佳实践" aria-label="Permalink to &quot;5. 注意事项和最佳实践&quot;">​</a></h3><h4 id="a-避免副作用" tabindex="-1">a. 避免副作用 <a class="header-anchor" href="#a-避免副作用" aria-label="Permalink to &quot;a. 避免副作用&quot;">​</a></h4><p><code>shouldComponentUpdate</code> 只应用于渲染决策，不应执行任何副作用，如网络请求或修改全局变量。</p><h4 id="b-避免深度比较" tabindex="-1">b. 避免深度比较 <a class="header-anchor" href="#b-避免深度比较" aria-label="Permalink to &quot;b. 避免深度比较&quot;">​</a></h4><p>深度比较可能会消耗大量性能，反而降低应用的响应速度。</p><h4 id="c-不要在此方法中调用-setstate" tabindex="-1">c. 不要在此方法中调用 <code>setState</code> <a class="header-anchor" href="#c-不要在此方法中调用-setstate" aria-label="Permalink to &quot;c. 不要在此方法中调用 \`setState\`&quot;">​</a></h4><p>这会导致组件重新渲染，从而引发无限循环。</p><h2 id="getsnapshotbeforeupdate" tabindex="-1">getSnapshotBeforeUpdate <a class="header-anchor" href="#getsnapshotbeforeupdate" aria-label="Permalink to &quot;getSnapshotBeforeUpdate&quot;">​</a></h2><h3 id="_1-什么是-getsnapshotbeforeupdate" tabindex="-1">1. 什么是 <code>getSnapshotBeforeUpdate</code>？ <a class="header-anchor" href="#_1-什么是-getsnapshotbeforeupdate" aria-label="Permalink to &quot;1. 什么是 \`getSnapshotBeforeUpdate\`？&quot;">​</a></h3><p><code>getSnapshotBeforeUpdate</code> 是 React 的一个生命周期方法，用于在 DOM 更新之前捕获一些信息。这个方法在最新的渲染输出被提交到 DOM 之前被调用，允许您在更新发生之前捕获一些关于 DOM 的信息。</p><h3 id="_2-方法签名" tabindex="-1">2. 方法签名 <a class="header-anchor" href="#_2-方法签名" aria-label="Permalink to &quot;2. 方法签名&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">(prevProps, prevState);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>prevProps</code>: 更新前的属性。</li><li><code>prevState</code>: 更新前的状态。</li></ul><h3 id="_3-返回值" tabindex="-1">3. 返回值 <a class="header-anchor" href="#_3-返回值" aria-label="Permalink to &quot;3. 返回值&quot;">​</a></h3><p>这个方法应返回一个值，该值将作为 <code>componentDidUpdate</code> 的第三个参数。如果您不需要捕获任何信息，可以返回 <code>null</code>。</p><h3 id="_4-使用场景" tabindex="-1">4. 使用场景 <a class="header-anchor" href="#_4-使用场景" aria-label="Permalink to &quot;4. 使用场景&quot;">​</a></h3><h4 id="a-捕获滚动位置" tabindex="-1">a. 捕获滚动位置 <a class="header-anchor" href="#a-捕获滚动位置" aria-label="Permalink to &quot;a. 捕获滚动位置&quot;">​</a></h4><p>如果您的组件涉及到滚动，并且在更新后需要保持滚动位置，可以使用以下代码：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.containerElement.scrollTop;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.containerElement.scrollTop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> snapshot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.containerElement.scrollTop;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.containerElement.scrollTop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> snapshot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="b-捕获表单状态" tabindex="-1">b. 捕获表单状态 <a class="header-anchor" href="#b-捕获表单状态" aria-label="Permalink to &quot;b. 捕获表单状态&quot;">​</a></h4><p>如果您的组件包含表单，并且您想在更新之前捕获表单的状态，可以这样做：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getSnapshotBeforeUpdate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.formElement.values;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用捕获的表单状态</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getSnapshotBeforeUpdate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.formElement.values;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用捕获的表单状态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="c-比较属性和状态" tabindex="-1">c. 比较属性和状态 <a class="header-anchor" href="#c-比较属性和状态" aria-label="Permalink to &quot;c. 比较属性和状态&quot;">​</a></h4><p>您还可以使用这个方法来比较前后属性和状态的变化，从而执行一些特定的逻辑。</p><h3 id="_5-注意事项" tabindex="-1">5. 注意事项 <a class="header-anchor" href="#_5-注意事项" aria-label="Permalink to &quot;5. 注意事项&quot;">​</a></h3><ul><li><code>getSnapshotBeforeUpdate</code> 必须与 <code>componentDidUpdate</code> 配合使用。</li><li>不要在这个方法中触发状态更新，否则会导致无限循环。</li></ul><h2 id="componentdidmount" tabindex="-1">componentDidMount <a class="header-anchor" href="#componentdidmount" aria-label="Permalink to &quot;componentDidMount&quot;">​</a></h2><p>在 React 18 中，<code>componentDidMount</code> 仍然是一个重要的生命周期方法，但随着 React Hooks 的流行，许多开发人员可能会转向使用 <code>useEffect</code> 钩子来代替。不过，对于那些仍在使用类组件的项目，<code>componentDidMount</code> 仍然是一个强大的工具。</p><h4 id="_1-数据获取" tabindex="-1">1. 数据获取 <a class="header-anchor" href="#_1-数据获取" aria-label="Permalink to &quot;1. 数据获取&quot;">​</a></h4><p><code>componentDidMount</code> 是一个理想的地方来执行异步操作，例如从 API 获取数据。这样做可以确保组件已经挂载到 DOM 中，因此您可以安全地更新状态。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/data&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">({ data }));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/data&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">({ data }));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-添加事件监听器" tabindex="-1">2. 添加事件监听器 <a class="header-anchor" href="#_2-添加事件监听器" aria-label="Permalink to &quot;2. 添加事件监听器&quot;">​</a></h4><p>如果您需要在组件挂载后添加事件监听器，<code>componentDidMount</code> 是一个完美的地方。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resize&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleResize);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resize&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleResize);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-操作-dom" tabindex="-1">3. 操作 DOM <a class="header-anchor" href="#_3-操作-dom" aria-label="Permalink to &quot;3. 操作 DOM&quot;">​</a></h4><p>如果您需要直接操作 DOM，<code>componentDidMount</code> 可以确保 DOM 已经准备好。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentDidMount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.myInput.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentDidMount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.myInput.</span><span style="color:#6F42C1;">focus</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-执行时机-1" tabindex="-1">4. 执行时机 <a class="header-anchor" href="#_4-执行时机-1" aria-label="Permalink to &quot;4. 执行时机&quot;">​</a></h4><p><code>componentDidMount</code> 是一个生命周期方法，它会在组件第一次渲染到 DOM 之后立即调用。这意味着它是在组件的第一次渲染完成后执行的，但在任何子组件的 <code>componentDidMount</code> 之前执行。</p><p>下面是执行时机的详细解释：</p><ul><li><p><strong>组件挂载完成</strong>：当组件被插入到 DOM 中后，<code>componentDidMount</code> 将被调用。此时，您可以安全地执行涉及 DOM 的操作。</p></li><li><p><strong>仅执行一次</strong>：与其他生命周期方法不同，<code>componentDidMount</code> 只在组件挂载后执行一次。如果您需要在组件更新后执行某些操作，您可能需要使用 <code>componentDidUpdate</code>。</p></li><li><p><strong>在子组件的 <code>componentDidMount</code> 之前执行</strong>：如果有子组件，父组件的 <code>componentDidMount</code> 将在任何子组件的 <code>componentDidMount</code> 之前执行。</p></li><li><p><strong>在 <code>render</code> 方法之后执行</strong>：<code>componentDidMount</code> 是在 <code>render</code> 方法之后执行的，所以在 <code>componentDidMount</code> 中调用 <code>setState</code> 将触发额外的渲染，但这不会让用户看到中间状态。</p></li></ul><p>哎呀，你完全对了！我竟然忘了提到 <code>componentDidUpdate</code> 的执行时机，这可是了解它的关键部分。让我补充一下：</p><h2 id="componentdidupdate-执行时机" tabindex="-1">componentDidUpdate 执行时机 <a class="header-anchor" href="#componentdidupdate-执行时机" aria-label="Permalink to &quot;componentDidUpdate 执行时机&quot;">​</a></h2><h4 id="_1-组件更新后" tabindex="-1">1. <strong>组件更新后</strong> <a class="header-anchor" href="#_1-组件更新后" aria-label="Permalink to &quot;1. **组件更新后**&quot;">​</a></h4><p><code>componentDidUpdate</code> 的名字已经暗示了它的执行时机：组件更新后。但是，什么会导致组件更新呢？</p><ul><li><strong>属性变化</strong>：当组件接收到新的属性时，它会触发更新。</li><li><strong>状态变化</strong>：当组件的状态改变时，它也会触发更新。</li><li><strong>父组件重新渲染</strong>：即使属性和状态没有改变，父组件的重新渲染也会导致子组件更新。</li></ul><h4 id="_2-不会在初始渲染时执行" tabindex="-1">2. <strong>不会在初始渲染时执行</strong> <a class="header-anchor" href="#_2-不会在初始渲染时执行" aria-label="Permalink to &quot;2. **不会在初始渲染时执行**&quot;">​</a></h4><p>当组件首次挂载时，<code>componentDidUpdate</code> 是不会被调用的。如果你需要在首次渲染后执行某些操作，可以使用 <code>componentDidMount</code> 方法。</p><h4 id="_3-在-render-方法之后" tabindex="-1">3. <strong>在 <code>render</code> 方法之后</strong> <a class="header-anchor" href="#_3-在-render-方法之后" aria-label="Permalink to &quot;3. **在 \`render\` 方法之后**&quot;">​</a></h4><p><code>componentDidUpdate</code> 是在 <code>render</code> 方法之后执行的，所以你可以确信此时 DOM 已经更新。这使得 <code>componentDidUpdate</code> 成为执行与 DOM 相关操作的理想时机。</p><h4 id="_4-在-getsnapshotbeforeupdate-之后" tabindex="-1">4. <strong>在 <code>getSnapshotBeforeUpdate</code> 之后</strong> <a class="header-anchor" href="#_4-在-getsnapshotbeforeupdate-之后" aria-label="Permalink to &quot;4. **在 \`getSnapshotBeforeUpdate\` 之后**&quot;">​</a></h4><p>如果你使用了 <code>getSnapshotBeforeUpdate</code> 方法，那么 <code>componentDidUpdate</code> 会在它之后执行。这样你可以在 <code>getSnapshotBeforeUpdate</code> 中捕获一些信息，并在 <code>componentDidUpdate</code> 中使用。</p><h4 id="_5-基础用法" tabindex="-1">5. <strong>基础用法</strong> <a class="header-anchor" href="#_5-基础用法" aria-label="Permalink to &quot;5. **基础用法**&quot;">​</a></h4><p><code>componentDidUpdate</code> 的基础用法非常简单。它接收三个参数：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentDidUpdate</span><span style="color:#E1E4E8;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentDidUpdate</span><span style="color:#24292E;">(prevProps, prevState, snapshot) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>prevProps</strong>：前一个属性对象。</li><li><strong>prevState</strong>：前一个状态对象。</li><li><strong>snapshot</strong>：从 <code>getSnapshotBeforeUpdate</code> 方法返回的值。</li></ul><h2 id="componentwillunmount" tabindex="-1">componentWillUnmount <a class="header-anchor" href="#componentwillunmount" aria-label="Permalink to &quot;componentWillUnmount&quot;">​</a></h2><h3 id="_1-什么是-componentwillunmount" tabindex="-1">1. 什么是 <code>componentWillUnmount</code>？ <a class="header-anchor" href="#_1-什么是-componentwillunmount" aria-label="Permalink to &quot;1. 什么是 \`componentWillUnmount\`？&quot;">​</a></h3><p>在 React 中，当一个组件不再需要时，<code>componentWillUnmount</code> 方法会被调用。这是一个清理组件相关资源的好时机。</p><h3 id="_2-componentwillunmount-的用法" tabindex="-1">2. <code>componentWillUnmount</code> 的用法 <a class="header-anchor" href="#_2-componentwillunmount-的用法" aria-label="Permalink to &quot;2. \`componentWillUnmount\` 的用法&quot;">​</a></h3><h4 id="清理定时器" tabindex="-1">清理定时器 <a class="header-anchor" href="#清理定时器" aria-label="Permalink to &quot;清理定时器&quot;">​</a></h4><p>如果组件中设置了定时器，当组件卸载时，定时器应该被清除，以避免不必要的错误和资源浪费。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentWillUnmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.timerID);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentWillUnmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.timerID);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="取消网络请求" tabindex="-1">取消网络请求 <a class="header-anchor" href="#取消网络请求" aria-label="Permalink to &quot;取消网络请求&quot;">​</a></h4><p>如果组件中发起了网络请求，当组件卸载时，应该取消未完成的请求，以避免不必要的警告和潜在的错误。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentWillUnmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.source.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;组件卸载，取消请求&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentWillUnmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.source.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;组件卸载，取消请求&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="移除事件监听器" tabindex="-1">移除事件监听器 <a class="header-anchor" href="#移除事件监听器" aria-label="Permalink to &quot;移除事件监听器&quot;">​</a></h4><p>如果组件中添加了事件监听器，当组件卸载时，应该移除这些监听器，以避免内存泄漏。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">componentWillUnmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">removeEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resize&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handleResize);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">componentWillUnmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resize&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handleResize);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>`,143);function k(f,D,_,q,P,B){const p=b,a=y("ClientOnly"),o=c,t=i,r=d;return h(),u("div",null,[F,g,s(a,null,{default:n(()=>[s(p,{src:"/images/react/10.png",alt:"React 常用生命周期"})]),_:1}),s(a,null,{default:n(()=>[s(p,{src:"/images/react/11.png",alt:"React 不常用生命周期"})]),_:1}),C,s(a,null,{default:n(()=>[s(o)]),_:1}),s(a,null,{default:n(()=>[s(t)]),_:1}),s(a,null,{default:n(()=>[s(r)]),_:1})])}const T=E(v,[["render",k]]);export{O as __pageData,T as default};
