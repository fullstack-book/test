import{_ as o,a as t,b as c}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.052e419c.js";import{_ as r,C as i,o as y,c as E,H as s,w as a,Q as d}from"./chunks/framework.27021b64.js";const v=JSON.parse('{"title":"React18 严格模式（Strict Mode）","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react/strict-mode.md","filePath":"framework/react/strict-mode.md","lastUpdated":1690794126000}'),u={name:"framework/react/strict-mode.md"},m=d(`<h1 id="react18-严格模式-strict-mode" tabindex="-1">React18 严格模式（Strict Mode） <a class="header-anchor" href="#react18-严格模式-strict-mode" aria-label="Permalink to &quot;React18 严格模式（Strict Mode）&quot;">​</a></h1><h2 id="什么是-strict-mode" tabindex="-1">什么是 Strict Mode <a class="header-anchor" href="#什么是-strict-mode" aria-label="Permalink to &quot;什么是 Strict Mode&quot;">​</a></h2><p>Strict Mode 是 React 16 中引入的一个开发工具，用于帮助开发者发现潜在的问题并进行调试。它可以在组件树中的任何位置启用，以帮助开发者识别一些不安全的做法、过时的 API 使用、副作用产生的警告等。</p><p>Strict Mode 会在开发环境下对组件进行额外的检查，并在控制台中输出相关的警告信息。它可以帮助开发者发现一些潜在的问题，例如不安全的生命周期方法使用、过时的 API 使用、意外的副作用等。Strict Mode 不会在生产环境中产生任何影响，它仅用于开发和调试阶段。</p><p>对于 React 而言，它推崇的是渲染结果只与 state 和 props 有关。即 result=f(props, state)。</p><p>如果组件每次的 state 和 props 是一样的，就应该返回一样的结果，若返回结果不一样，说明代码中可能存在副作用。</p><h2 id="启用-strict-mode" tabindex="-1">启用 Strict Mode <a class="header-anchor" href="#启用-strict-mode" aria-label="Permalink to &quot;启用 Strict Mode&quot;">​</a></h2><p>Strict Mode 可以在组件树的任何位置启用，它会影响到该组件以及所有子组件。在类组件中，可以通过在组件的 render 方法中包裹一个 &lt;React.StrictMode&gt; 组件来启用 Strict Mode：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.tsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">React.StrictMode</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">React.StrictMode</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.tsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">React.StrictMode</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">React.StrictMode</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="strict-mode-的作用" tabindex="-1">Strict Mode 的作用 <a class="header-anchor" href="#strict-mode-的作用" aria-label="Permalink to &quot;Strict Mode 的作用&quot;">​</a></h2><p>严格模式（Strict Mode）从 React 16.3 版本开始支持，用于标记出应用中潜在的代码问题。</p><p>StrictMode 目前有助于：</p><ul><li id="identifying-unsafe-lifecycles">识别不安全的生命周期</li><li id="warning-about-legacy-string-ref-api-usage">关于使用过时字符串 ref API 的警告</li><li id="warning-about-deprecated-finddomnode-usage">关于使用废弃的 findDOMNode 方法的警告</li><li id="detecting-unexpected-side-effects">检测意外的副作用</li><li id="detecting-legacy-context-api">检测过时的 context API</li><li id="ensuring-reusable-state">确保可复用的 state</li></ul><h2 id="为什么函数组件会执行两次" tabindex="-1">为什么函数组件会执行两次 <a class="header-anchor" href="#为什么函数组件会执行两次" aria-label="Permalink to &quot;为什么函数组件会执行两次&quot;">​</a></h2><p>在 React 18 的严格模式下，函数组件可能会执行两次的情况通常是由于 React 的工作原理所导致的。React 的底层设计实现了一种称为&quot;双缓冲&quot;的机制，用于在组件更新时进行性能优化。</p><p>当一个函数组件被调用时，React 会执行组件函数并生成一个虚拟 DOM 树。然后，React 会将这个虚拟 DOM 树与之前的虚拟 DOM 树进行比较，找出需要更新的部分。这个过程称为&quot;协调&quot;。</p><p>在严格模式下，React 会执行两次组件函数。第一次执行是为了收集组件的副作用（例如，读取上下文、订阅事件等），以便在后续的比较中能够正确地处理这些副作用。第二次执行是为了生成最终的虚拟 DOM 树，并与之前的虚拟 DOM 树进行比较。</p><p>这种双缓冲机制的设计可以确保在组件更新时，React 能够正确地处理副作用，并且只更新需要更新的部分，从而提高性能。 需要注意的是，函数组件执行两次并不一定意味着组件的渲染也会发生两次。React 会尽可能地优化渲染过程，只更新需要更新的部分。因此，即使函数组件执行了两次，实际的渲染可能只发生一次。</p><p>举例如下：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useState } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setCount</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Component rendered&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在控制台打印组件渲染的消息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Count: {count}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setCount</span><span style="color:#E1E4E8;">(count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)}&gt;Increment&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Counter;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">count</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setCount</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Component rendered&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在控制台打印组件渲染的消息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Count: {count}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setCount</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)}&gt;Increment&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Counter;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在上述代码中，我们使用了 React 的 useState 钩子来创建一个名为 count 的状态变量，并使用 setCount 函数来更新它。每次点击按钮时，计数器的值会增加，并且组件会重新渲染。</p><p>在严格模式下，当我们点击按钮时，Counter 组件会执行两次。第一次执行是为了收集副作用，例如订阅事件或读取上下文。第二次执行是为了生成最终的虚拟 DOM 树，并与之前的虚拟 DOM 树进行比较。</p><p>在控制台中，我们会看到两次&quot;Component rendered&quot;的消息。这是因为组件在第一次执行时打印了一次，然后在第二次执行时又打印了一次。 这种执行两次的机制确保了 React 能够正确地处理副作用，并且只更新需要更新的部分，从而提高性能。尽管组件执行了两次，但实际的渲染可能只发生一次，只更新了计数器的值。</p><h2 id="为什么-useeffect-会执行两次" tabindex="-1">为什么 useEffect 会执行两次 <a class="header-anchor" href="#为什么-useeffect-会执行两次" aria-label="Permalink to &quot;为什么 useEffect 会执行两次&quot;">​</a></h2><p>React18 中，StrictMode 增加了对 Strict Effects 的支持。在严格模式下，React 会对新渲染的组件调用两次 effect（mount -&gt; unmount -&gt; mount）。与其他严格模式下的行为一样，React 仅在开发环境中执行此操作。</p><h3 id="非严格模式" tabindex="-1">非严格模式 <a class="header-anchor" href="#非严格模式" aria-label="Permalink to &quot;非严格模式&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">* React mounts the component. //挂载组件</span></span>
<span class="line"><span style="color:#e1e4e8;">  * Layout effects are created. //layout执行</span></span>
<span class="line"><span style="color:#e1e4e8;">  * Effects are created. //Effects执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">* React mounts the component. //挂载组件</span></span>
<span class="line"><span style="color:#24292e;">  * Layout effects are created. //layout执行</span></span>
<span class="line"><span style="color:#24292e;">  * Effects are created. //Effects执行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">* React mounts the component. //挂载组件</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Layout effects are created. //layout执行</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Effect effects are created. // Effects执行</span></span>
<span class="line"><span style="color:#e1e4e8;">// React模拟组件销毁</span></span>
<span class="line"><span style="color:#e1e4e8;">* React simulates effects being destroyed on a mounted component.</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Layout effects are destroyed. // layout销毁</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Effects are destroyed.       // Effects销毁</span></span>
<span class="line"><span style="color:#e1e4e8;">// React模拟重新挂载</span></span>
<span class="line"><span style="color:#e1e4e8;">* React simulates effects being re-created on a mounted component.</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Layout effects are created  // layout重新创建</span></span>
<span class="line"><span style="color:#e1e4e8;">    * Effect setup code runs     //  Effect重新执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">* React mounts the component. //挂载组件</span></span>
<span class="line"><span style="color:#24292e;">    * Layout effects are created. //layout执行</span></span>
<span class="line"><span style="color:#24292e;">    * Effect effects are created. // Effects执行</span></span>
<span class="line"><span style="color:#24292e;">// React模拟组件销毁</span></span>
<span class="line"><span style="color:#24292e;">* React simulates effects being destroyed on a mounted component.</span></span>
<span class="line"><span style="color:#24292e;">    * Layout effects are destroyed. // layout销毁</span></span>
<span class="line"><span style="color:#24292e;">    * Effects are destroyed.       // Effects销毁</span></span>
<span class="line"><span style="color:#24292e;">// React模拟重新挂载</span></span>
<span class="line"><span style="color:#24292e;">* React simulates effects being re-created on a mounted component.</span></span>
<span class="line"><span style="color:#24292e;">    * Layout effects are created  // layout重新创建</span></span>
<span class="line"><span style="color:#24292e;">    * Effect setup code runs     //  Effect重新执行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="关闭严格模式" tabindex="-1">关闭严格模式 <a class="header-anchor" href="#关闭严格模式" aria-label="Permalink to &quot;关闭严格模式&quot;">​</a></h2><p>只需要将 <code>React.StrictMode</code> 隐藏即可</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.tsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;React.StrictMode&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;/React.StrictMode&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/client&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.tsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;React.StrictMode&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;/React.StrictMode&gt;,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>`,33);function b(f,h,F,g,C,R){const e=o,n=i("ClientOnly"),l=t,p=c;return y(),E("div",null,[m,s(n,null,{default:a(()=>[s(e)]),_:1}),s(n,null,{default:a(()=>[s(l)]),_:1}),s(n,null,{default:a(()=>[s(p)]),_:1})])}const M=r(u,[["render",b]]);export{v as __pageData,M as default};
