import{_ as t,a as i,b as d}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.052e419c.js";import{_ as u}from"./chunks/CodePen.vue_vue_type_script_setup_true_lang.a566a0de.js";import{_ as E,C as y,o as b,c as h,H as a,w as e,Q as m,k as s,a as n}from"./chunks/framework.27021b64.js";const L=JSON.parse('{"title":"CSS 多列布局：全面解析与实践指南","description":"","frontmatter":{},"headers":[],"relativePath":"column/css/css/multi-column-layout.md","filePath":"column/css/css/multi-column-layout.md","lastUpdated":1693985159000}'),C={name:"column/css/css/multi-column-layout.md"},k=m("",38),g=s("p",null,[n("注意：避免同时使用 "),s("code",null,"break-after"),n("和"),s("code",null,"break-before"),n("，因为可能导致列数增加。")],-1),v=s("h3",{id:"_2、避免内部元素分割",tabindex:"-1"},[n("2、避免内部元素分割 "),s("a",{class:"header-anchor",href:"#_2、避免内部元素分割","aria-label":'Permalink to "2、避免内部元素分割"'},"​")],-1),_=s("p",null,"在这个例子中：",-1),F=s("p",null,"Item 1、Item 2 和 Item 3 都设置了 break-inside: avoid;，所以浏览器会尽量避免在这些元素内部进行列断开。",-1),f=s("p",null,"Item 4 由于其高度（400px）大于容器的高度（300px），即使设置了 break-inside: avoid;，它也会被分割到不同的列中。",-1),q=s("p",null,"这个例子展示了即使使用了 break-inside: avoid;，如果元素太大或有其他布局限制（如容器高度），元素仍然可能会被分割到不同的列。",-1),x=s("p",null,"如果不想让Item 4内部分割到不同的列，可以移除 容器高度300px。",-1),B=s("h2",{id:"贡献者",tabindex:"-1"},[n("贡献者 "),s("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者"'},"​")],-1);function w(P,S,A,$,D,I){const o=u,p=t,l=y("ClientOnly"),c=i,r=d;return b(),h("div",null,[k,a(o,{id:"QWzGmyL",title:"多列布局（CSS Multi-column Layout）"}),g,v,a(o,{id:"VwqmXmx",title:"多列布局-避免内部元素分割"}),_,F,f,q,x,B,a(l,null,{default:e(()=>[a(p)]),_:1}),a(l,null,{default:e(()=>[a(c)]),_:1}),a(l,null,{default:e(()=>[a(r)]),_:1})])}const G=E(C,[["render",w]]);export{L as __pageData,G as default};
