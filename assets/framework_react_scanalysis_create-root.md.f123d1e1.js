import{_ as o,a as r,b as c}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.052e419c.js";import{_ as t,C as i,o as E,c as y,H as s,w as a,Q as b}from"./chunks/framework.27021b64.js";const B=JSON.parse('{"title":"React18 createRoot 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react/scanalysis/create-root.md","filePath":"framework/react/scanalysis/create-root.md","lastUpdated":1690350698000}'),u={name:"framework/react/scanalysis/create-root.md"},d=b(`<h1 id="react18-createroot-源码解析" tabindex="-1">React18 createRoot 源码解析 <a class="header-anchor" href="#react18-createroot-源码解析" aria-label="Permalink to &quot;React18 createRoot 源码解析&quot;">​</a></h1><h2 id="react18-createroot-相关源码" tabindex="-1">React18 createRoot 相关源码 <a class="header-anchor" href="#react18-createroot-相关源码" aria-label="Permalink to &quot;React18 createRoot 相关源码&quot;">​</a></h2><p>github 地址：<a href="https://github.com/dapandocs/react-window/blob/main/src/react/packages/react-dom/src/client/ReactDOMRoot.js#L183" target="_blank" rel="noreferrer">createRoot 源码</a></p><p>createRoot 流程图地址：<a href="https://boardmix.cn/app/share/CAE.CK_wig0gASoQVSQw8kRUnFUgm6GtcOd4HTAGQAE/zc1tIg" target="_blank" rel="noreferrer">createRoot 流程图</a></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7Be6r" id="tab-XD6E_tH" checked="checked"><label for="tab-XD6E_tH">createRoot</label><input type="radio" name="group-7Be6r" id="tab-Ar6qU3w"><label for="tab-Ar6qU3w">createContainer</label><input type="radio" name="group-7Be6r" id="tab-mtOQP6X"><label for="tab-mtOQP6X">createFiberRoot</label><input type="radio" name="group-7Be6r" id="tab-uZ41fDs"><label for="tab-uZ41fDs">FiberRootNode构造函数</label><input type="radio" name="group-7Be6r" id="tab-Yt7qFTG"><label for="tab-Yt7qFTG">createHostRootFiber</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">container</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查容器是否为有效的 DOM 元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isValidContainer</span><span style="color:#E1E4E8;">(container)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createRoot(...): Target container is not a DOM element.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在开发环境下，如果容器是 ReactDOM 容器，则发出警告</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warnIfReactDOMContainerInDEV</span><span style="color:#E1E4E8;">(container);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化选项的默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isStrictMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> concurrentUpdatesByDefaultOverride </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> identifierPrefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> onRecoverableError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultOnRecoverableError;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> transitionCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理传入的选项参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理严格模式选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.unstable_strictMode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      isStrictMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理并发更新选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      allowConcurrentByDefault </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      options.unstable_concurrentUpdatesByDefault </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      concurrentUpdatesByDefaultOverride </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理标识符前缀选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.identifierPrefix </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      identifierPrefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.identifierPrefix;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理可恢复错误回调选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.onRecoverableError </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      onRecoverableError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.onRecoverableError;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理过渡回调选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.unstable_transitionCallbacks </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      transitionCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.unstable_transitionCallbacks;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 React 容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createContainer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    container,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConcurrentRoot,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isStrictMode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    concurrentUpdatesByDefaultOverride,</span></span>
<span class="line"><span style="color:#E1E4E8;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onRecoverableError,</span></span>
<span class="line"><span style="color:#E1E4E8;">    transitionCallbacks</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将容器标记为根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">markContainerAsRoot</span><span style="color:#E1E4E8;">(root.current, container);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置当前的 Dispatcher</span></span>
<span class="line"><span style="color:#E1E4E8;">  Dispatcher.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactDOMClientDispatcher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取根容器元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootContainerElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    container.nodeType </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">COMMENT_NODE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> container.parentNode </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> container;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 监听根容器元素上的所有支持的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">listenToAllSupportedEvents</span><span style="color:#E1E4E8;">(rootContainerElement);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回一个包含 _internalRoot 属性的新的 ReactDOMRoot 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactDOMRoot</span><span style="color:#E1E4E8;">(root);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(</span><span style="color:#E36209;">container</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查容器是否为有效的 DOM 元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isValidContainer</span><span style="color:#24292E;">(container)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createRoot(...): Target container is not a DOM element.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在开发环境下，如果容器是 ReactDOM 容器，则发出警告</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warnIfReactDOMContainerInDEV</span><span style="color:#24292E;">(container);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化选项的默认值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isStrictMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> concurrentUpdatesByDefaultOverride </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> identifierPrefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> onRecoverableError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultOnRecoverableError;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> transitionCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理传入的选项参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理严格模式选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.unstable_strictMode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      isStrictMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理并发更新选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      allowConcurrentByDefault </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      options.unstable_concurrentUpdatesByDefault </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      concurrentUpdatesByDefaultOverride </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理标识符前缀选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.identifierPrefix </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      identifierPrefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.identifierPrefix;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理可恢复错误回调选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.onRecoverableError </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      onRecoverableError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.onRecoverableError;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理过渡回调选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.unstable_transitionCallbacks </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      transitionCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.unstable_transitionCallbacks;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 React 容器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createContainer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    container,</span></span>
<span class="line"><span style="color:#24292E;">    ConcurrentRoot,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    isStrictMode,</span></span>
<span class="line"><span style="color:#24292E;">    concurrentUpdatesByDefaultOverride,</span></span>
<span class="line"><span style="color:#24292E;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#24292E;">    onRecoverableError,</span></span>
<span class="line"><span style="color:#24292E;">    transitionCallbacks</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将容器标记为根节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">markContainerAsRoot</span><span style="color:#24292E;">(root.current, container);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置当前的 Dispatcher</span></span>
<span class="line"><span style="color:#24292E;">  Dispatcher.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactDOMClientDispatcher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取根容器元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootContainerElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    container.nodeType </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">COMMENT_NODE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> container.parentNode </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> container;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 监听根容器元素上的所有支持的事件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">listenToAllSupportedEvents</span><span style="color:#24292E;">(rootContainerElement);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回一个包含 _internalRoot 属性的新的 ReactDOMRoot 实例</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactDOMRoot</span><span style="color:#24292E;">(root);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createContainer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// DOM 元素信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">containerInfo</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 水合(hydration)回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrationCallbacks</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否启用严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">isStrictMode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否默认启用并发更新</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">concurrentUpdatesByDefaultOverride</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">identifierPrefix</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">onRecoverableError</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">transitionCallbacks</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 水合标志,默认为 false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hydrate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始子组件,默认为 null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialChildren</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用 createFiberRoot 创建 Fiber 根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createFiberRoot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    containerInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hydrate,</span></span>
<span class="line"><span style="color:#E1E4E8;">    initialChildren,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hydrationCallbacks,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isStrictMode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    concurrentUpdatesByDefaultOverride,</span></span>
<span class="line"><span style="color:#E1E4E8;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onRecoverableError,</span></span>
<span class="line"><span style="color:#E1E4E8;">    transitionCallbacks</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createContainer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// DOM 元素信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">containerInfo</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">tag</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 水合(hydration)回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrationCallbacks</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否启用严格模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">isStrictMode</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否默认启用并发更新</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">concurrentUpdatesByDefaultOverride</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">identifierPrefix</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">onRecoverableError</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">transitionCallbacks</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 水合标志,默认为 false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hydrate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始子组件,默认为 null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialChildren</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用 createFiberRoot 创建 Fiber 根节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createFiberRoot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    containerInfo,</span></span>
<span class="line"><span style="color:#24292E;">    tag,</span></span>
<span class="line"><span style="color:#24292E;">    hydrate,</span></span>
<span class="line"><span style="color:#24292E;">    initialChildren,</span></span>
<span class="line"><span style="color:#24292E;">    hydrationCallbacks,</span></span>
<span class="line"><span style="color:#24292E;">    isStrictMode,</span></span>
<span class="line"><span style="color:#24292E;">    concurrentUpdatesByDefaultOverride,</span></span>
<span class="line"><span style="color:#24292E;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#24292E;">    onRecoverableError,</span></span>
<span class="line"><span style="color:#24292E;">    transitionCallbacks</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createFiberRoot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">containerInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrate</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">initialChildren</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrationCallbacks</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// hydration 回调</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">isStrictMode</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否为严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">concurrentUpdatesByDefaultOverride</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 并发更新默认设置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO: 我们有几个参数在概念上属于主机配置，但是因为它们在运行时传递，所以我们必须通过根构造函数传递它们。也许我们应该将它们全部放在一个名为 DynamicHostConfig 的单一类型中，由渲染器定义。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">identifierPrefix</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">onRecoverableError</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 可恢复错误的回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">transitionCallbacks</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建一个新的 FiberRootNode 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRootNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    containerInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hydrate,</span></span>
<span class="line"><span style="color:#E1E4E8;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onRecoverableError</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果启用了 Suspense 回调，将 hydrationCallbacks 设置为 root 的 hydrationCallbacks 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableSuspenseCallback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root.hydrationCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hydrationCallbacks;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果启用了 Transition Tracing，将 transitionCallbacks 设置为 root 的 transitionCallbacks 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableTransitionTracing) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root.transitionCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transitionCallbacks;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建一个未初始化的 Fiber 作为根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uninitializedFiber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHostRootFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isStrictMode,</span></span>
<span class="line"><span style="color:#E1E4E8;">    concurrentUpdatesByDefaultOverride</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将未初始化的 Fiber 设置为 root 的 current 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> uninitializedFiber;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将 root 设置为未初始化的 Fiber 的 stateNode 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  uninitializedFiber.stateNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果启用了缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个初始缓存对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialCache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCache</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">retainCache</span><span style="color:#E1E4E8;">(initialCache);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将初始缓存对象设置为 root 的 pooledCache 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    root.pooledCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialCache;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">retainCache</span><span style="color:#E1E4E8;">(initialCache);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建初始状态对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      element: initialChildren, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      isDehydrated: hydrate, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache: initialCache, </span><span style="color:#6A737D;">// 缓存对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将初始状态对象设置为未初始化的 Fiber 的 memoizedState 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    uninitializedFiber.memoizedState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialState;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建不包含缓存的初始状态对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      element: initialChildren, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      isDehydrated: hydrate, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 尚未启用缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将初始状态对象设置为未初始化的 Fiber 的 memoizedState 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    uninitializedFiber.memoizedState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialState;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化未初始化的 Fiber 的更新队列</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">initializeUpdateQueue</span><span style="color:#E1E4E8;">(uninitializedFiber);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回创建的 FiberRootNode 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createFiberRoot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">containerInfo</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">tag</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrate</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">initialChildren</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrationCallbacks</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// hydration 回调</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">isStrictMode</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否为严格模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">concurrentUpdatesByDefaultOverride</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 并发更新默认设置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO: 我们有几个参数在概念上属于主机配置，但是因为它们在运行时传递，所以我们必须通过根构造函数传递它们。也许我们应该将它们全部放在一个名为 DynamicHostConfig 的单一类型中，由渲染器定义。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">identifierPrefix</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">onRecoverableError</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 可恢复错误的回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">transitionCallbacks</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建一个新的 FiberRootNode 实例</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRootNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    containerInfo,</span></span>
<span class="line"><span style="color:#24292E;">    tag,</span></span>
<span class="line"><span style="color:#24292E;">    hydrate,</span></span>
<span class="line"><span style="color:#24292E;">    identifierPrefix,</span></span>
<span class="line"><span style="color:#24292E;">    onRecoverableError</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果启用了 Suspense 回调，将 hydrationCallbacks 设置为 root 的 hydrationCallbacks 属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableSuspenseCallback) {</span></span>
<span class="line"><span style="color:#24292E;">    root.hydrationCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hydrationCallbacks;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果启用了 Transition Tracing，将 transitionCallbacks 设置为 root 的 transitionCallbacks 属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableTransitionTracing) {</span></span>
<span class="line"><span style="color:#24292E;">    root.transitionCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transitionCallbacks;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建一个未初始化的 Fiber 作为根节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uninitializedFiber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHostRootFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    tag,</span></span>
<span class="line"><span style="color:#24292E;">    isStrictMode,</span></span>
<span class="line"><span style="color:#24292E;">    concurrentUpdatesByDefaultOverride</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将未初始化的 Fiber 设置为 root 的 current 属性</span></span>
<span class="line"><span style="color:#24292E;">  root.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uninitializedFiber;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将 root 设置为未初始化的 Fiber 的 stateNode 属性</span></span>
<span class="line"><span style="color:#24292E;">  uninitializedFiber.stateNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果启用了缓存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableCache) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个初始缓存对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialCache</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCache</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">retainCache</span><span style="color:#24292E;">(initialCache);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将初始缓存对象设置为 root 的 pooledCache 属性</span></span>
<span class="line"><span style="color:#24292E;">    root.pooledCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialCache;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">retainCache</span><span style="color:#24292E;">(initialCache);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建初始状态对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      element: initialChildren, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#24292E;">      isDehydrated: hydrate, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#24292E;">      cache: initialCache, </span><span style="color:#6A737D;">// 缓存对象</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将初始状态对象设置为未初始化的 Fiber 的 memoizedState 属性</span></span>
<span class="line"><span style="color:#24292E;">    uninitializedFiber.memoizedState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialState;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建不包含缓存的初始状态对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      element: initialChildren, </span><span style="color:#6A737D;">// 初始子元素</span></span>
<span class="line"><span style="color:#24292E;">      isDehydrated: hydrate, </span><span style="color:#6A737D;">// 是否进行 hydration</span></span>
<span class="line"><span style="color:#24292E;">      cache: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 尚未启用缓存</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将初始状态对象设置为未初始化的 Fiber 的 memoizedState 属性</span></span>
<span class="line"><span style="color:#24292E;">    uninitializedFiber.memoizedState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialState;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化未初始化的 Fiber 的更新队列</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">initializeUpdateQueue</span><span style="color:#24292E;">(uninitializedFiber);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回创建的 FiberRootNode 对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FiberRootNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">containerInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">hydrate</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否为恢复模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">identifierPrefix</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">onRecoverableError</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag; </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.containerInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> containerInfo; </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pendingChildren </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 待处理的子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 当前工作单元</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pingCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Ping缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.finishedWork </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 完成的工作单元</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.timeoutHandle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> noTimeout; </span><span style="color:#6A737D;">// 超时句柄</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cancelPendingCommit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 取消待处理的提交</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pendingContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 待处理的上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 下一个工作单元</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.callbackNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 回调节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.callbackPriority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLane; </span><span style="color:#6A737D;">// 回调优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.expirationTimes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createLaneMap</span><span style="color:#E1E4E8;">(NoTimestamp); </span><span style="color:#6A737D;">// 过期时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pendingLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 待处理的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.suspendedLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 暂停的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pingedLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// Ping的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.expiredLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 过期的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.finishedLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 完成的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.errorRecoveryDisabledLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 禁用错误恢复的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.shellSuspendCounter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Shell挂起计数器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entangledLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 关联的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entanglements </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createLaneMap</span><span style="color:#E1E4E8;">(NoLanes); </span><span style="color:#6A737D;">// 关联的Lanes映射</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hiddenUpdates </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createLaneMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 隐藏的更新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.identifierPrefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifierPrefix; </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.onRecoverableError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onRecoverableError; </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pooledCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 缓存池</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pooledCacheLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoLanes; </span><span style="color:#6A737D;">// 缓存池的Lanes</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableSuspenseCallback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hydrationCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 悬挂回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.incompleteTransitions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 不完整的过渡</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableTransitionTracing) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.transitionCallbacks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transitionLanesMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.transitionLanes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []); </span><span style="color:#6A737D;">// 过渡的Lanes映射</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> TotalLanes; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      transitionLanesMap.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> enableProfilerCommitHooks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.effectDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 效果持续时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.passiveEffectDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 被动效果持续时间</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableUpdaterTracking) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.memoizedUpdaters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 记忆化的更新器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pendingUpdatersLaneMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pendingUpdatersLaneMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []); </span><span style="color:#6A737D;">// 待处理的更新器的Lanes映射</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> TotalLanes; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      pendingUpdatersLaneMap.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FiberRootNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">containerInfo</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">tag</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">hydrate</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否为恢复模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">identifierPrefix</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">onRecoverableError</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tag; </span><span style="color:#6A737D;">// 标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.containerInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> containerInfo; </span><span style="color:#6A737D;">// 容器信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pendingChildren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 待处理的子节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 当前工作单元</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pingCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Ping缓存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.finishedWork </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 完成的工作单元</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.timeoutHandle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> noTimeout; </span><span style="color:#6A737D;">// 超时句柄</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cancelPendingCommit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 取消待处理的提交</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 上下文</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pendingContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 待处理的上下文</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 下一个工作单元</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.callbackNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 回调节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.callbackPriority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLane; </span><span style="color:#6A737D;">// 回调优先级</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.expirationTimes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createLaneMap</span><span style="color:#24292E;">(NoTimestamp); </span><span style="color:#6A737D;">// 过期时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pendingLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 待处理的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.suspendedLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 暂停的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pingedLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// Ping的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.expiredLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 过期的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.finishedLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 完成的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorRecoveryDisabledLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 禁用错误恢复的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.shellSuspendCounter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Shell挂起计数器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entangledLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 关联的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entanglements </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createLaneMap</span><span style="color:#24292E;">(NoLanes); </span><span style="color:#6A737D;">// 关联的Lanes映射</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hiddenUpdates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createLaneMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 隐藏的更新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.identifierPrefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> identifierPrefix; </span><span style="color:#6A737D;">// 标识符前缀</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onRecoverableError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onRecoverableError; </span><span style="color:#6A737D;">// 可恢复错误回调函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableCache) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pooledCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 缓存池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pooledCacheLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoLanes; </span><span style="color:#6A737D;">// 缓存池的Lanes</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableSuspenseCallback) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hydrationCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 悬挂回调函数</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.incompleteTransitions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 不完整的过渡</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableTransitionTracing) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.transitionCallbacks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 过渡回调函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transitionLanesMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.transitionLanes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []); </span><span style="color:#6A737D;">// 过渡的Lanes映射</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> TotalLanes; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      transitionLanesMap.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> enableProfilerCommitHooks) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.effectDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 效果持续时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.passiveEffectDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 被动效果持续时间</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableUpdaterTracking) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.memoizedUpdaters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 记忆化的更新器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pendingUpdatersLaneMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pendingUpdatersLaneMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []); </span><span style="color:#6A737D;">// 待处理的更新器的Lanes映射</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> TotalLanes; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      pendingUpdatersLaneMap.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHostRootFiber</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 标记，用于确定根节点的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">isStrictMode</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否启用严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">concurrentUpdatesByDefaultOverride</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 并发更新的默认设置</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mode; </span><span style="color:#6A737D;">// 模式变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> ConcurrentRoot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果标记为ConcurrentRoot</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConcurrentMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentMode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isStrictMode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> createRootStrictEffectsByDefault) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果启用了严格模式或者createRootStrictEffectsByDefault为真</span></span>
<span class="line"><span style="color:#E1E4E8;">      mode </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> StrictLegacyMode </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> StrictEffectsMode; </span><span style="color:#6A737D;">// 设置模式为StrictLegacyMode和StrictEffectsMode</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (forceConcurrentByDefaultForTesting) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 仅用于测试，强制默认启用并发模式</span></span>
<span class="line"><span style="color:#E1E4E8;">      mode </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> ConcurrentUpdatesByDefaultMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentUpdatesByDefaultMode</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (allowConcurrentByDefault </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> concurrentUpdatesByDefaultOverride) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 仅用于内部实验，如果允许默认启用并发模式并且有并发更新的默认设置</span></span>
<span class="line"><span style="color:#E1E4E8;">      mode </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> ConcurrentUpdatesByDefaultMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentUpdatesByDefaultMode</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NoMode; </span><span style="color:#6A737D;">// 如果标记不是ConcurrentRoot，则模式为NoMode</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enableProfilerTimer </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> isDevToolsPresent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果启用了性能分析计时器并且DevTools存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 总是收集性能分析时间，以便DevTools可以在任何时刻开始捕获时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 而不会有树中的某些节点具有空的基准时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> ProfileMode; </span><span style="color:#6A737D;">// 设置模式为ProfileMode</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createFiber</span><span style="color:#E1E4E8;">(HostRoot, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, mode); </span><span style="color:#6A737D;">// 创建并返回一个Fiber节点</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHostRootFiber</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">tag</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 标记，用于确定根节点的类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">isStrictMode</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否启用严格模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">concurrentUpdatesByDefaultOverride</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 并发更新的默认设置</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mode; </span><span style="color:#6A737D;">// 模式变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> ConcurrentRoot) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果标记为ConcurrentRoot</span></span>
<span class="line"><span style="color:#24292E;">    mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConcurrentMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentMode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isStrictMode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> createRootStrictEffectsByDefault) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果启用了严格模式或者createRootStrictEffectsByDefault为真</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> StrictLegacyMode </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> StrictEffectsMode; </span><span style="color:#6A737D;">// 设置模式为StrictLegacyMode和StrictEffectsMode</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (forceConcurrentByDefaultForTesting) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 仅用于测试，强制默认启用并发模式</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> ConcurrentUpdatesByDefaultMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentUpdatesByDefaultMode</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (allowConcurrentByDefault </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> concurrentUpdatesByDefaultOverride) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 仅用于内部实验，如果允许默认启用并发模式并且有并发更新的默认设置</span></span>
<span class="line"><span style="color:#24292E;">      mode </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> ConcurrentUpdatesByDefaultMode; </span><span style="color:#6A737D;">// 设置模式为ConcurrentUpdatesByDefaultMode</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NoMode; </span><span style="color:#6A737D;">// 如果标记不是ConcurrentRoot，则模式为NoMode</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enableProfilerTimer </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> isDevToolsPresent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果启用了性能分析计时器并且DevTools存在</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 总是收集性能分析时间，以便DevTools可以在任何时刻开始捕获时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 而不会有树中的某些节点具有空的基准时间</span></span>
<span class="line"><span style="color:#24292E;">    mode </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> ProfileMode; </span><span style="color:#6A737D;">// 设置模式为ProfileMode</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createFiber</span><span style="color:#24292E;">(HostRoot, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, mode); </span><span style="color:#6A737D;">// 创建并返回一个Fiber节点</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></div></div><h2 id="react18-createroot-函数作用" tabindex="-1">React18 createRoot 函数作用 <a class="header-anchor" href="#react18-createroot-函数作用" aria-label="Permalink to &quot;React18 createRoot 函数作用&quot;">​</a></h2><ul><li><p>检查容器的有效性：函数首先检查传入的容器参数是否为有效的 DOM 元素。如果容器无效，将抛出错误。</p></li><li><p>发出警告和错误：在开发环境下，函数会检查传入的选项参数，并根据选项的不同发出相应的警告或错误。例如，如果使用了过时的 hydrate 选项，函数会发出警告。如果传入的选项是 JSX 元素，函数会发出错误，提醒开发者应该使用 root.render 方法而不是 createRoot。</p></li><li><p>创建 React 容器：函数使用 createContainer 函数创建一个 React 容器。这个容器将用于管理 React 组件的渲染和更新。</p></li><li><p>返回 ReactDOMRoot 实例：函数返回一个包含 _internalRoot 属性的新的 ReactDOMRoot 实例。这个实例代表了 React 根节点的内部表示，可以通过该实例的方法进行根节点的渲染和卸载操作。</p></li></ul><p>综上所述，createRoot 函数的作用是创建一个 React 根节点，并将其挂载到指定的 DOM 容器中，以便进行 React 组件的渲染和更新。</p><h2 id="react18-createcontainer-函数作用" tabindex="-1">React18 createContainer 函数作用 <a class="header-anchor" href="#react18-createcontainer-函数作用" aria-label="Permalink to &quot;React18 createContainer 函数作用&quot;">​</a></h2><ul><li><p>创建 React 组件的容器：createContainer 函数会创建一个容器来存放和管理 React 组件。这个容器是组件渲染和更新的基础。</p></li><li><p>配置组件的渲染环境： 通过接收各种参数,createContainer 可以配置组件的渲染环境,比如:</p></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">是否启用严格模式(isStrictMode)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">默认是否开启并发更新(concurrentUpdatesByDefaultOverride)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">标识符前缀</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">错误恢复回调函数(onRecoverableError)</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">过渡回调函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">是否启用严格模式(isStrictMode)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">默认是否开启并发更新(concurrentUpdatesByDefaultOverride)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">标识符前缀</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">错误恢复回调函数(onRecoverableError)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">过渡回调函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>构建 Fiber 树：最终通过调用 createFiberRoot 来构建 Fiber 树的根节点,Fiber 树是 React 内部实现组件渲染和更新的核心数据结构。</p></li><li><p>返回容器：函数返回一个包含 _internalRoot 属性的新的 ReactDOMRoot 实例。这个实例代表了 React 根节点的内部表示，可以通过该实例的方法进行根节点的渲染和卸载操作。</p></li></ul><h2 id="react18-createfiberroot-函数作用" tabindex="-1">React18 createFiberRoot 函数作用 <a class="header-anchor" href="#react18-createfiberroot-函数作用" aria-label="Permalink to &quot;React18 createFiberRoot 函数作用&quot;">​</a></h2><ul><li><p>创建 Fiber 树的根节点：createFiberRoot 函数通过实例化 FiberRootNode 类创建了一个 Fiber 树的根节点。这个根节点是整个 React 组件树的起点。</p></li><li><p>设置根节点的属性：根据传入的参数，createFiberRoot 函数设置了根节点的一些属性，如容器信息、标签、是否进行 hydration 等。</p></li><li><p>设置回调函数：如果启用了 Suspense 回调，createFiberRoot 函数将传入的 hydrationCallbacks 设置为根节点的 hydrationCallbacks 属性。如果启用了 Transition Tracing，将传入的 transitionCallbacks 设置为根节点的 transitionCallbacks 属性。</p></li><li><p>创建未初始化的 Fiber：createFiberRoot 函数通过调用 createHostRootFiber 创建了一个未初始化的 Fiber，用于表示根节点。</p></li><li><p>设置根节点的当前 Fiber：将未初始化的 Fiber 设置为根节点的 current 属性，表示当前正在处理的 Fiber。</p></li><li><p>设置未初始化 Fiber 的 stateNode：将根节点设置为未初始化 Fiber 的 stateNode 属性，以建立根节点和 Fiber 之间的关联。</p></li><li><p>初始化缓存（如果启用）：如果启用了缓存，createFiberRoot 函数创建了一个初始的缓存对象，并将其设置为根节点的 pooledCache 属性。</p></li><li><p>初始化更新队列：通过调用 initializeUpdateQueue 函数，createFiberRoot 函数初始化了未初始化 Fiber 的更新队列，用于存储组件的更新操作。</p></li><li><p>返回根节点：最后，createFiberRoot 函数返回创建的 Fiber 树的根节点。</p></li></ul><p>综上所述，createFiberRoot 函数的作用是创建和初始化一个 Fiber 树的根节点，并进行必要的设置和关联。它是 React 内部使用的函数，用于构建组件的 Fiber 树。</p><h2 id="react18-fiberrootnode-构造函数作用" tabindex="-1">React18 FiberRootNode 构造函数作用 <a class="header-anchor" href="#react18-fiberrootnode-构造函数作用" aria-label="Permalink to &quot;React18 FiberRootNode 构造函数作用&quot;">​</a></h2><ul><li>标识和容器信息</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tag：标识 React 根节点的类型，可以是 ConcurrentRoot（并发模式）或 LegacyRoot（传统模式）。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">containerInfo：表示 React 应用程序的容器信息，例如 DOM 元素或其他宿主环境的相关信息。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tag：标识 React 根节点的类型，可以是 ConcurrentRoot（并发模式）或 LegacyRoot（传统模式）。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">containerInfo：表示 React 应用程序的容器信息，例如 DOM 元素或其他宿主环境的相关信息。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>状态管理</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pendingChildren：存储待处理的子节点，即将被渲染到容器中的 React 元素。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">current：指向当前正在处理的工作单元，即正在进行中的渲染任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">inishedWork：指向已完成的工作单元，即已经完成的渲染任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">pingCache：用于缓存 Ping 操作的结果，以便在下一次渲染时进行快速判断。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pendingChildren：存储待处理的子节点，即将被渲染到容器中的 React 元素。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">current：指向当前正在处理的工作单元，即正在进行中的渲染任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">inishedWork：指向已完成的工作单元，即已经完成的渲染任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">pingCache：用于缓存 Ping 操作的结果，以便在下一次渲染时进行快速判断。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>调度和优先级</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pendingLanes：表示待处理的调度优先级（lanes），用于确定哪些任务应该被优先处理。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">suspendedLanes：表示暂停的调度优先级（lanes），用于标记已经被暂停的任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">pingedLanes：表示已经进行了 Ping 操作的调度优先级（lanes），用于标记已经被 Ping 的任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">expiredLanes：表示已过期的调度优先级（lanes），用于标记已经过期的任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">finishedLanes：表示已完成的调度优先级（lanes），用于标记已经完成的任务。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pendingLanes：表示待处理的调度优先级（lanes），用于确定哪些任务应该被优先处理。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">suspendedLanes：表示暂停的调度优先级（lanes），用于标记已经被暂停的任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">pingedLanes：表示已经进行了 Ping 操作的调度优先级（lanes），用于标记已经被 Ping 的任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">expiredLanes：表示已过期的调度优先级（lanes），用于标记已经过期的任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">finishedLanes：表示已完成的调度优先级（lanes），用于标记已经完成的任务。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>错误处理和恢复</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">errorRecoveryDisabledLanes：表示禁用错误恢复的调度优先级（lanes），用于标记禁用错误恢复的任务。   </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">onRecoverableError：可恢复错误发生时的回调函数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">errorRecoveryDisabledLanes：表示禁用错误恢复的调度优先级（lanes），用于标记禁用错误恢复的任务。   </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">onRecoverableError：可恢复错误发生时的回调函数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>上下文和标识符</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">context：当前的上下文对象。</span></span>
<span class="line"><span style="color:#e1e4e8;">pendingContext：待处理的上下文对象。</span></span>
<span class="line"><span style="color:#e1e4e8;">identifierPrefix：标识符的前缀，用于生成唯一的标识符。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">context：当前的上下文对象。</span></span>
<span class="line"><span style="color:#24292e;">pendingContext：待处理的上下文对象。</span></span>
<span class="line"><span style="color:#24292e;">identifierPrefix：标识符的前缀，用于生成唯一的标识符。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>缓存和悬挂</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pooledCache：用于缓存复用的 Fiber 节点。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">pooledCacheLanes：缓存池中的调度优先级（lanes）。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">shellSuspendCounter：用于跟踪 Shell 挂起的计数器。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pooledCache：用于缓存复用的 Fiber 节点。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">pooledCacheLanes：缓存池中的调度优先级（lanes）。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">shellSuspendCounter：用于跟踪 Shell 挂起的计数器。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>关联和更新追踪</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">entangledLanes：表示关联的调度优先级（lanes），用于标记关联的任务。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">entanglements：关联的调度优先级（lanes）的映射。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">hiddenUpdates：用于存储隐藏的更新。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">entangledLanes：表示关联的调度优先级（lanes），用于标记关联的任务。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">entanglements：关联的调度优先级（lanes）的映射。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">hiddenUpdates：用于存储隐藏的更新。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>调试和性能分析</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">_debugRootType：用于调试目的的根类型。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">hydrationCallbacks：用于悬挂操作的回调函数。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">incompleteTransitions：存储不完整的过渡。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">transitionCallbacks：过渡的回调函数。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">effectDuration：记录效果（effect）的持续时间。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">passiveEffectDuration：记录被动效果（passive effect）的持续时间。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">memoizedUpdaters：存储记忆化的更新器。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">pendingUpdatersLaneMap：待处理的更新器的调度优先级（lanes）的映射。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">_debugRootType：用于调试目的的根类型。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">hydrationCallbacks：用于悬挂操作的回调函数。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">incompleteTransitions：存储不完整的过渡。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">transitionCallbacks：过渡的回调函数。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">effectDuration：记录效果（effect）的持续时间。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">passiveEffectDuration：记录被动效果（passive effect）的持续时间。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">memoizedUpdaters：存储记忆化的更新器。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">pendingUpdatersLaneMap：待处理的更新器的调度优先级（lanes）的映射。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="react18-createhostrootfiber-函数作用" tabindex="-1">React18 createHostRootFiber 函数作用 <a class="header-anchor" href="#react18-createhostrootfiber-函数作用" aria-label="Permalink to &quot;React18 createHostRootFiber 函数作用&quot;">​</a></h2><p>createHostRootFiber 函数的参数包括标记（用于确定根节点的类型）、是否启用严格模式以及并发更新的默认设置。根据这些参数的不同，函数会设置相应的模式，并将这些模式应用于创建的 HostRoot 节点。</p><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>`,35);function m(F,D,A,C,h,f){const l=o,n=i("ClientOnly"),p=r,e=c;return E(),y("div",null,[d,s(n,null,{default:a(()=>[s(l)]),_:1}),s(n,null,{default:a(()=>[s(p)]),_:1}),s(n,null,{default:a(()=>[s(e)]),_:1})])}const R=t(u,[["render",m]]);export{B as __pageData,R as default};
